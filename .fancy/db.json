{
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/home.html": {
    "revision": 1503356712000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/home.html",
        "data": {
          "global": [
            [
              "title",
              "Introduction"
            ],
            [
              "body",
              "\n\n\n<article>\n  <section>\n    <h1>Introduction</h1>\n    <p>So you want to start a business. Well, you&apos;re not alone.</p>\n    <p>Every schmuck with a website, university with an MBA program, and former founder with a few bucks in their pocket thinks they can tell you how to make it big in their next podcast or blog post.</p>\n    <p>The truth is most of them have never done it. They read a lot of books, they spout a lot of nonsense, and in the end they give misguided advice to people like you who have an awesome idea. They don&apos;t KNOW the things they are telling you and the advice gets dangerous.</p>\n    <p>The truth is that you <em>can</em> start a business right now, education and resources be damned. You can create a product and land your first users in as little as a week. Why am I different? Because I&apos;ve done it &#x2013; I&apos;ve been down this path multiple times and I know what works, what doesn&apos;t, and more importantly, how to move on when the time is right.</p>\n    <p>But there are a few things to get out of the way first. A few important details every young entrepreneur needs to know. The stuff that gets lost in the noise about why some companies fail, others succeed, and others still never make it off the ground.</p>\n    <h2>Who Am I?</h2>\n    <p>My name is Cory Mawhorter, and I didn&apos;t get a fancy degree from an overpriced school with a prestigious computer science program.</p>\n    <p>I put my head down and got to work and before most of my classmates had even set foot in an office, I had built and grown my first business into something special.</p>\n    <p>That was 16 years ago. Since then I started two more companies and am working on several additional projects, including an as yet unnamed non-profit.</p>\n    <p>Did I learn how to do this in school? Did I have a helping hand or an angel investor pouring money into my ideas?</p>\n    <p>No and no.</p>\n    <p>I am 100% self-taught &#x2013; both in code and business &#x2013; and I built what I created not knowing a damn thing about business. And it worked, but it wasn&apos;t luck. It was the result of perseverance, and a willingness to fail.</p>\n    <p>WE NEED A STORY HERE &#x2013; SOMETHING SPECIFIC TO YOU AND WHAT YOU DID WITH TEHSE COMPANIES.</p>\n    <h2>Failure Is an Option</h2>\n    <p>All of this means that I have a very specific perspective on what you&apos;re trying to do. As a teenager, I was building, coding, and running a business without any background in doing so.</p>\n    <p>And now you&apos;re reading this because you want to start a business, right?</p>\n    <p>Good, because that&apos;s what we&apos;re going to look at, but it&apos;s going to be different from what you might have read elsewhere.</p>\n    <p>I want you to <em>build </em>a business. Not think about it. Not plan it. Not brainstorm it. I want you to <em>build</em>.</p>\n    <p>That means you&apos;ll be doing it as fast as possible. I want you to forget about what &quot;might&quot; happen. Seriously, things fail&#x2026;a lot. For every founder who struck it rich in his first go, there&apos;s a thousand other founders who tried and failed a dozen times before making it happen.</p>\n    <p>In this game, be ready to face plant every now and then. Better yet, get excited about it. Failure means you&apos;re learning, and when you learn, you get smarter &#x2013; smarter than the competitors who tend to quit after one or two trips. You will probably fail, so prepare for it now and know that you&apos;re going to get smarter and be capable of doing more because of it.</p>\n    <p>Does that mean you <em>want</em> to fail?</p>\n    <p>Hell no. Everyone wants to succeed, but be ready for failure.&#xA0;</p>\n    <p>The startup world is full of people who went to the grindstone for their ideas. Tried over and over again to make it happen and eventually found success.</p>\n    <p>But there&apos;s a catch to all this.</p>\n    <p>If you&apos;re going to fail, do it sooner than later. Technology moves too fast. Evolves too quickly. You need to be quick on your feet, and more importantly, willing to know when to call it quits.</p>\n    <p>If you don&apos;t, your competitors will beat you in the inevitable arms race that ensues or you&apos;ll fall victim to the very real risk of scope creep or vaporware.</p>\n    <p>At a certain point, when failure rears its ugly head, you&apos;re throwing good money after bad. When you put an idea into the world and attempt to start a business around it, endless failure with no success in sight is a sign &#x2013; a sign that your idea isn&apos;t meant to be, at least not yet.</p>\n    <p>Does that mean it will never work? Maybe not, but without countless hours and a bottomless pit of money, you&apos;ll never know. Any project can succeed with enough money behind it. Will it profit, though? No. What you want is feedback &#x2013; positive feedback that shows you from the minute you press &quot;start&quot; that it&apos;s worth your time.</p>\n    <p>Anything less is a failure and you need to be okay with that.</p>\n    <p>What constitutes a failure?</p>\n    <ol>\n    <li><strong>Poor user feedback</strong> &#x2013; What do people say after using your app? Are they eager to keep using it? Would they pay for it again? Do they want their money back? The feedback you get up front (even from family) is huge at this point.</li>\n    <li><strong>Slow user growth</strong> &#x2013; How long does it take to get new users. Quick user growth means an app that people need &#x2013; something they show to others and get excited about. If no one is signing up, maybe no one needs what you&apos;re offering.</li>\n    <li><strong>Not making money</strong> &#x2013; Bottom line, if you don&apos;t make money on a project, don&apos;t keep doing it. It&apos;s not a hobby, it&apos;s an investment, and good investments give a return.</li>\n    </ol>\n    <p>If you create a product and people don&apos;t like it, your product may be a failure, and to avoid over investing in a failure, it&apos;s time to start over. The best part, though? You&apos;ve only spent a tiny bit of time on that idea. You aren&apos;t so invested that you HAVE to continue.</p>\n    <p>The point of no return is miles away and the &quot;loss&quot; of failure is still far off. Yet one more reason why the quick start approach to a startup makes the most sense &#x2013; you aren&apos;t as mentally invested if the product isn&apos;t a winner out of the gate.</p>\n    <p>To put it simply, it&apos;s better to lose $10,000 today than two years of your life. Trust me, it will be MUCH harder to give up after that time is gone.</p>\n    <p>Here&apos;s a bit of advice &#x2013; don&apos;t be in anything for the long haul. Once you break that point of no return, failure starts to hurt&#x2026;a lot. The sooner you are willing to admit your idea is dead in the water and refine or restart, the easier it will be to accept that a second try is needed.</p>\n    <h2>Every Action Has Purpose</h2>\n    <p>If there&apos;s anything I&apos;ve learned in the last 16 years, and if there&apos;s anything I want you to take away from this book, it&apos;s that every action has purpose.</p>\n    <p>If you can&apos;t think of a good reason for what you&apos;re doing, stop doing it. Whether it&apos;s launching a product you built in a week to see what happens, testing a new feature in an app you just built, or asking for feedback from your friends and family, it all has a purpose.</p>\n    <p>And whether you make it rich right off the bat or you crash and burn and have to start from scratch, it all has purpose. You&apos;re learning. You&apos;re trying. You&apos;re building a better version of you &#x2013; one that has created something new and exciting.</p>\n    <p>I want you to believe that <em>anything </em>is possible. I know it is because I&apos;ve been there and I&apos;ve done it. In the next 8 days, you&apos;re going to read about what I&apos;ve done, why I did it the way I did, and what you can do to replicate my success (and many failures).</p>\n    <p>It&#x2019;s a bit messy, nothing is guaranteed, and everyone reading this will see different results, but it&apos;s a process I <em>know</em> works because I&apos;ve been following it since I was in High School.</p>\n    <p>I&apos;m excited to share it with you and even more excited to see what you can do with it.</p>\n  </section>\n</article>\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "id",
              "home"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/01-sunday-learn/toc.html": {
    "revision": 1503356381000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/01-sunday-learn/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n\n<article>\n  <section>\n    <h1>Learn</h1>\n    <p>So you want to start a business. Well, you&apos;re not alone.</p>\n    <p>Every schmuck with a website, university with an MBA program, and former founder with a few bucks in their pocket thinks they can tell you how to make it big in their next podcast or blog post.</p>\n    <p>The truth is most of them have never done it. They read a lot of books, they spout a lot of nonsense, and in the end they give misguided advice to people like you who have an awesome idea. They don&apos;t KNOW the things they are telling you and the advice gets dangerous.</p>\n    <p>The truth is that you <em>can</em> start a business right now, education and resources be damned. You can create a product and land your first users in as little as a week. Why am I different? Because I&apos;ve done it &#x2013; I&apos;ve been down this path multiple times and I know what works, what doesn&apos;t, and more importantly, how to move on when the time is right.</p>\n    <p>But there are a few things to get out of the way first. A few important details every young entrepreneur needs to know. The stuff that gets lost in the noise about why some companies fail, others succeed, and others still never make it off the ground.</p>\n    <p>Today is all about learning the ins and outs of the industry and how the right mindset and a basic understanding of the market you&apos;re about to dive headfirst into can make all the difference.</p>\n    <p>Let&apos;s do it.</p>\n    <h2>Failure Is an Option</h2>\n    <p>You want to start a business? Do it as fast as possible and forget about what &quot;might&quot; happen. Seriously, things fail&#x2026;a lot. For every founder who struck it rich in his first go, there&apos;s a thousand other founders who tried and failed a dozen times before making it happen.</p>\n    <p>In this game, be ready to face plant every now and then. Better yet, get excited about it. Failure means you&apos;re learning, and when you learn, you get smarter &#x2013; smarter than the competitors who tend to quit after one or two trips. You will probably fail, so prepare for it now and know that you&apos;re going to get smarter and be capable of doing more because of it.</p>\n    <p>Does that mean you <em>want</em> to fail?</p>\n    <p>Hell no. Everyone wants to succeed, but be ready for failure.&#xA0;</p>\n    <p>The startup world is full of people who went to the grindstone for their ideas. Tried over and over again to make it happen and eventually found success.</p>\n    <p>But there&apos;s a catch to all this.</p>\n    <p>If you&apos;re going to fail, do it sooner than later. Technology moves too fast. Evolves too quickly. You need to be quick on your feet, and more importantly, willing to know when to call it quits.</p>\n    <p>If you don&apos;t, your competitors will beat you in the inevitable arms race that ensues or you&apos;ll fall victim to the very real risk of scope creep or vaporware.</p>\n    <p>At a certain point, when failure rears its ugly head, you&apos;re throwing good money after bad. When you put an idea into the world and attempt to start a business around it, endless failure with no success in sight is a sign &#x2013; a sign that your idea isn&apos;t meant to be, at least not yet.</p>\n    <p>Does that mean it will never work? Maybe not, but without countless hours and a bottomless pit of money, you&apos;ll never know. Any project can succeed with enough money behind it. Will it profit, though? No. What you want is feedback &#x2013; positive feedback that shows you from the minute you press &quot;start&quot; that it&apos;s worth your time.</p>\n    <p>Anything less is a failure and you need to be okay with that.</p>\n    <p>What constitutes a failure?</p>\n    <ol>\n    <li><strong>Poor user feedback</strong> &#x2013; What do people say after using your app? Are they eager to keep using it? Would they pay for it again? Do they want their money back? The feedback you get up front (even from family) is huge at this point.</li>\n    <li><strong>Slow user growth</strong> &#x2013; How long does it take to get new users. Quick user growth means an app that people need &#x2013; something they show to others and get excited about. If no one is signing up, maybe no one needs what you&apos;re offering.</li>\n    <li><strong>Not making money</strong> &#x2013; Bottom line, if you don&apos;t make money on a project, don&apos;t keep doing it. It&apos;s not a hobby, it&apos;s an investment, and good investments give a return.</li>\n    </ol>\n    <p>If you create a product and people don&apos;t like it, your product may be a failure, and to avoid over investing in a failure, it&apos;s time to start over. The best part, though? You&apos;ve only spent a tiny bit of time on that idea. You aren&apos;t so invested that you HAVE to continue.</p>\n    <p>The point of no return is miles away and the &quot;loss&quot; of failure is still far off. Yet one more reason why the quick start approach to a startup makes the most sense &#x2013; you aren&apos;t as mentally invested if the product isn&apos;t a winner out of the gate.</p>\n    <p>To put it simply, it&apos;s better to lose $10,000 today than two years of your life. Trust me, it will be MUCH harder to give up after that time is gone.</p>\n    <p>Here&apos;s a bit of advice &#x2013; don&apos;t be in anything for the long haul. Once you break that point of no return, failure starts to hurt&#x2026;a lot. The sooner you are willing to admit your idea is dead in the water and refine or restart, the easier it will be to accept that a second try is needed.</p>\n    <h2>Entrepreneurship 101</h2>\n    <p>You don&apos;t need an MBA to start a business. Heck, you don&apos;t even need to have finished High School.</p>\n    <p>There are a few basics we&apos;re going to knock out really quick, but if you really want to start a business, my advice is to just do it. Don&apos;t sit around and think about it or read 30 books on the topic or watch movies wondering <em>what if</em>. Get out there and build something. Seriously, put this book down and go do it &#x2013; you&apos;re wasting time.</p>\n    <p>So, let&apos;s keep this as short as possible.</p>\n    <p>I&apos;ve seen a lot of bad and a bit of good in the industry, and as a result I&apos;ve seen a lot of business owners screw up their chances. Here are some of the most common mistakes I&apos;ve seen &#x2013; don&apos;t repeat them:</p>\n    <ul>\n    <li><strong>Going into business with friends/family</strong> &#x2013; Just don&apos;t do it. There&apos;s baggage, there&apos;s expectations, and almost guaranteed someone will let you down. What happens when it all falls apart &#x2013; do you fire your best friend? Don&apos;t let the success of your business hinge on one of your closest (and potentially most fragile) relationships.</li>\n    <li><strong>Quitting your job</strong> &#x2013; Just don&apos;t do it. If you&apos;re embracing failure, you&apos;d better have a way to pay the bills. That would be your day job, my friend.</li>\n    <li><strong>Being nice to your friends/family</strong> &#x2013; Don&apos;t give away your product, give extra time to your friends, or help them anymore than you would normally. Making exceptions for the people you&apos;re closest to is a sure way to sink success before it sails.</li>\n    <li><strong>&quot;Eating your inventory&quot;</strong> &#x2013; The same goes for yourself. Don&apos;t use your own product or service into the ground, and definitely don&apos;t spend every dime you make. You&apos;ll need it for later. More on salary shortly, but here&apos;s as hint: you won&apos;t be getting one (at first).</li>\n    <li><strong>Working in the business instead of on it</strong> &#x2013; Work on the business, not in it. Replying to customer questions and updating website copy is all fine and good, but you should also be improving software, coming up with new ideas, and looking for ways to grow (more on that later).</li>\n    <li><strong>Starting big, not thinking big</strong> &#x2013; Thinking big is great and it&apos;s a hell of a lot fun (working on the beach anyone?) But don&apos;t start big. Think big, start small and get done what you can. Don&apos;t overdo it.</li>\n    <li><strong>Paying for the best </strong>&#x2013; With almost no exceptions, paying for the best guy out there is a money sink. Pay for the best you <em>can afford</em> right now (which will be pretty cheap) and fix it when you&apos;re big.</li>\n    </ul>\n    <p>This list could be longer. MUCH longer. Let&apos;s leave it at that though. Success with your new company will depend on two things &#x2013; you getting stuff done and you not being afraid to take the next step.</p>\n    <p>Do those two things and you&apos;ll either succeed or fail, but at least something will happen. That&apos;s already better than 90% of the people out there with &quot;cool ideas&quot;.</p>\n    <h3>You&apos;re On Your Own</h3>\n    <p>People will say a lot of things to you while you build your business. Some will be supportive. Others will take apart your ideas. Others still will be quiet until you start making money &#x2013; then they&apos;ll become insanely jealous and want in.</p>\n    <p>It doesn&apos;t matter. This is all you and that means you&apos;re on your own. No one&apos;s going to give you money for your project. No one is going to help you if stuff goes sideways. Heck, no one really cares that much about your business (except your mom, she cares) &#x2013; if they say otherwise, they&apos;re just being polite.</p>\n    <p>The truth is that most people screw this up and fail, and your friends and family are thinking exactly that right now. &quot;When is she going to screw up and fail?&quot; They&apos;re waiting for the moment they can say &quot;I told you so&quot;. The best thing you can do is focus on your business and show them otherwise.</p>\n    <h3>Types of Businesses</h3>\n    <p>If you plan on starting a business, actually start the business. Doing stuff in your basement and putting it online is a hobby. A real business has a legal structure and some form of protections.</p>\n    <p>Quick disclaimer &#x2013; I&apos;m not a lawyer and you shouldn&apos;t listen to a thing I say when it comes to this stuff as far as advice. What I can tell you is what I know from my own efforts and how they will affect you.</p>\n    <p>Here are the business structures you can choose from in the US:</p>\n    <ul>\n    <li>Corporation</li>\n    <li>LLC/LLP</li>\n    <li>Sole Proprietorship</li>\n    </ul>\n    <p>What&apos;s the difference? For our purposes, not much. A corporation is pretty much out from the start because it&apos;s designed for larger companies with larger assets in larger markets. Maybe someday, but not now.</p>\n    <p>For a regular guy starting a new business from scratch, you don&apos;t need much, but you do need legal protection. You&apos;ll get that through an LLC (limited liability company). Basically, this makes it so the actions of your company are legally tied to your company. People can sue the company but not you personally. Anything less and you&apos;re wide open.&#xA0;</p>\n    <h3>Legalize It</h3>\n    <p>Don&apos;t just think about it, do it. In most states, this is easy. You can use a site like Legal Zoom to grab your paperwork and start the process, and whether you know anything about business law or not (I&apos;m going to guess not), it&apos;ll walk you through the process of forming your organization.</p>\n    <p>If you&apos;re on your own, this will protect you if something goes south and someone wants to sue. If you&apos;re working with cofounders, this will protect you from getting Zuckerberged. Doesn&apos;t matter if they&apos;re your best friends (see above!), those jerks could throw you to the wolves if it meant the potential for a 6 or 7 figure payday.</p>\n    <p>On top of the liability and ownership components, what if something goes wrong? A ton of stuff gets overlooked in the day to day operations of a business from a legal stand point.</p>\n    <p>Use the documentation to map out as much of that as you can in advance. This literally takes 30 minutes so there&apos;s no reason not to do it. And when you do, you&apos;ll have a plan for if the business shuts down, who gets what if it&apos;s successful, how to handle someone not doing their share, and a whole bunch of other possible situations.</p>\n    <p>It&apos;s not free either so make sure you&apos;re ready. Every state has different fees both to start and to stop a business &#x2013; be aware of these in advance and ready to pay them. Keep in mind before you run off to Delaware to start your business that if you want to work with the government, local is better. A lot of municipalities are legally required to buy a certain percentage from local small businesses.</p>\n    <h3>Profits and Salaries</h3>\n    <p>Before the dollar signs get so big you can&apos;t see the ground in front of you, keep in mind how much time and money goes into creating any successful business.</p>\n    <p>When you start a business, you lose money. Until you start earning a profit, you&apos;re putting money into the machine. If that machine doesn&apos;t start returning more than you put in, there&apos;s nothing to give yourself.</p>\n    <p>That said, if your startup is successful there will be a time when that happens. It might take 6 months or it might take two years. It depends on what you&apos;re trying to do and how much you spend to get to the point of a profitable business. Unlike Wall Street, the CEO of a startup should be the last to receive a raise.</p>\n    <p>For now, though, you&apos;d better be putting every dime you can back into the business. It takes money to build a profitable endeavor; if you don&#x2019;t invest in it, you can&apos;t earn a profit down the line.</p>\n    <p>There&apos;s a serious personal choice here you&apos;ll need to make &#x2013; are you creating a business to grow so you can exit and take a single big pay day? Or are you creating a career for yourself &#x2013; an opportunity to do something you love for years to come?</p>\n    <p>The answer to that question is going to have a HUGE impact on what you pay yourself and when.</p>\n    <h3>Marketing</h3>\n    <p>When people find out I&apos;ve started companies in the past, they tend to ask about the marketing. How did I acquire users? What did I do to kick start the marketing campaign? The truth is, things used to just be easier &#x2013; you build something awesome and you sell it &#x2013; period.</p>\n    <p>So, I hate these questions. Putting lipstick on a pig will only get you so far. Sure, it matters that you have a kickass idea, know as much as possible about the people who would buy that idea, and have at least a partial plan in place for how to attract those people once you build something, but most of a &quot;marketing&quot; plan is stuff for much later. In week one we build a product &#x2013; we&apos;ll worry about selling it later.</p>\n    <p>You can&apos;t start a business with hype and clever copywriting alone. You need an awesome product, and that&apos;s what we&apos;re going to focus on.</p>\n    <p>So what exactly DO you need right now? Hint, a lot of it can wait.</p>\n    <h2>Internet Software 101</h2>\n    <p>It&apos;s hard to imagine, but the Internet is almost 30 years old, and boy has it changed.</p>\n    <p>As long as there has been software there have been different types of devices to run it on. The differences between devices meant writing the same software multiple times; once for each device and the development cost and time was extensive. Macromedia (Adobe) Flash and Java were created to address this specific problem.</p>\n    <p>But things have changed dramatically in the last decade. Flash is in a death rattle with decreased or non-existent support on a number of platforms. Don&apos;t build anything in Flash. Period. Java existed on the web as Java Applets but those have been dead and gone from the web for years. And honestly, good riddance to them both.</p>\n    <p>Today, fewer than ever software packages start as native apps &#x2013; they&apos;re almost all web based and on a subscription model. Google and Microsoft, the biggest fish in the pond, are well down that road and will continue driving change.</p>\n    <p>Why?</p>\n    <p>Because it makes more sense. How many devices do you have in your life? A laptop. A tablet. A mobile phone. A desktop at home. Every one of those devices should be using the same software and sharing files. Why not? The technology supports it. The &quot;write once, run everything&quot; dream has finally arrived.</p>\n    <p>Development is catching up with those demands and it means new companies (like yours!) need to think forward &#x2013; developing content that matches those specific needs. Whether mobile or desktop, client or server based, there are a lot of questions you&apos;ll need to answer before you start creating your first product.</p>\n    <h3>A Brief History of Internet Software</h3>\n    <p>Internet software is a whole different animal. These are the tools that have native online capabilities and essentially require the Internet to function effectively. Today it&apos;s a no brainer that apps need to do this, but twenty years ago? It was a revolution.</p>\n    <p>In the early days of the Internet, there were a lot of web browsers and each did things differently. Of course, that meant writing multiple versions of your website (and anything else you needed to run online).</p>\n    <p>How crippling was this approach? Microsoft, who had built an empire on desktop software and also happened to build the world&apos;s most popular browser is single-handedly responsible for delaying progress by 5-10 years. They did everything in their power to keep web software from taking off until they could develop a web app strategy.</p>\n    <p>It was infuriating. I almost quit the industry because of this and I wasn&apos;t alone.</p>\n    <p>These days? Things are different and they&apos;re changing fast. Google and Microsoft alike are heavily invested in web apps and the technology that powers them.</p>\n    <p>With Google, Microsoft and everyone else on board, offering the bulk of their software library as web apps and supporting growth in other areas, combined with the mobile explosion, the web has advanced more in the last 5 years than in the previous 15.&#xA0;</p>\n    <p>The cloud is a huge part of this &#x2013; services like AWS, Google, and Azure are making it possible to have software that runs like this &#x2013; and increased Internet speed and accessibility to that speed is making it possible for tools like this to be more universal.</p>\n    <p>And for the consumer it&apos;s free.</p>\n    <p>This is a new world we live in and it&apos;s only a matter of time before we reach a point that ALL apps are developed as web-only and multi-platform.</p>\n    <p>In the meantime, you have to make a choice.</p>\n    <h3>Mobile vs. Web Applications</h3>\n    <p>There are the web applications that run in a browser and can be accessed from almost any device, and then there are the native mobile apps written specifically for a particular type of device.</p>\n    <p>There are hybrid apps too &#x2013; web apps that have been wrapped in a special package for mobile. It&#x2019;s a good workaround to get your web app into the world&apos;s largest app stores for mobile, and while they&apos;re a bit clunky now, they&apos;re getting better every day.</p>\n    <p>This will continue to evolve too.</p>\n    <p>Companies want to reach as many people as possible in as many ways. Mobile apps, web apps &#x2013; it&apos;s all the same if you&apos;re always online. The key for you is to decide which platform makes the most sense for <em>your </em>idea.</p>\n    <p>Should you go native? Here&apos;s a good rule of thumb:</p>\n    <ul>\n    <li>Is it a game? Go native.</li>\n    <li>Does your design feature a lot of animations or transitions? Go native.</li>\n    <li>Do you only want to target the iPhone or Android market? Go native.</li>\n    </ul>\n    <p>Honestly, the only thing that web apps <em>don&apos;t </em>do as well as native right now is animation &#x2013; trust me, that will change. Don&apos;t worry about whether an app is native affects your ability to target the mobile market &#x2013; just worry about the best possible experience.</p>\n    <p>The right decision for you will be case by case. Should you be on mobile? Probably. But how you get there will be determined by what you are building.</p>\n    <h4>Mobile, Native Apps</h4>\n    <p>Native apps are better for a handful of applications, but the code is the same. Because that code is written specifically for the operating system of the device on which it is running, performance is smoother and more seamless.</p>\n    <p>But if you view the source of any website, you&apos;ll see JavaScript &#x2013; the same JavaScript you&apos;d see in a web app or native app. The direct access to the full power of your device is what makes native apps better.&#xA0;</p>\n    <p>Native apps perform better which means better battery life for mobile devices. They offer diverse entertainment options (games), and they look much better. They are design-centric with a lot of graphics and animations.</p>\n    <p>On the flip side, web apps play a game of telephone with the operating system. They tell the browser what to do, the browser tells the operating system what to do, and the hardware performs &#x2013; the added step creates dips in performance for certain functions.</p>\n    <p><strong>Mobile is Growing&#x2026;</strong></p>\n    <p>A lot. At the start of 2015, there were 3.649 billion unique mobile users in the world, more than half the world&apos;s population, and more than the number of active Internet users (3.01 billion).</p>\n    <p>That&apos;s a big number, but consider how much it&apos;s grown and how much it continues to grow. Of those 3.65 billion phones, more than 2 billion are smart phones. Those numbers are both expected to nearly double by 2017.</p>\n    <p>On the flip side, desktop sales have been on the decline for years. In January, 2014 mobile Internet use surpassed desktop use for the first time in history and it&apos;s still growing. The bottom line, desktops are going away.</p>\n    <p>The only way you&apos;ll see desktop computers in 40 years is when your hipster grandchildren pull them out to use ironically like you use record players today.</p>\n    <p><strong>How We Build for Mobile App Stores</strong></p>\n    <p>So if mobile is the new reality for developers, how do we build for it and where are those apps sold?</p>\n    <p>The status quo since Apple launched their App Store in 2008 has been the centralized app repository. There are differences to be sure &#x2013; Apple&apos;s is curated, Google&apos;s is not, and Amazon&apos;s is somewhere in the middle &#x2013; but they all do roughly the same thing. Create a dumping ground for apps that people can access from their device.</p>\n    <p>The wild west days of desktop software are gone &#x2013; there aren&apos;t 10,000 shareware websites with buggy software and (probably) fake reviews. Just one place and one set of rules.</p>\n    <p>The pros of all this? The audience is enormous. There are millions of apps in each of these stores and billions of downloads. The Apple App Store sees more than 1,000 downloads per second and that&apos;s just one outlet. So if you sell here and you can hit big, you hit <em>really </em>big. A #1 app in this ecosystem is like hitting the lottery.</p>\n    <p>It&apos;s how Clash of Clans generates hundreds of millions of dollars in revenue <em>PER MONTH</em> from a relatively simple tower defense game. These guys got the eyeballs and only an App Store model makes that possible.</p>\n    <p>On the flip side not everything is sunshine and roses. For every $1 you make, $0.30 goes back to Apple in the App Store.</p>\n    <p>Apps. In-App Purchases &#x2013; all of it. They get a cut.</p>\n    <p>If your margins are thin, they&apos;re about to get a whole lot thinner and that&apos;s not including advertising and other expenses.</p>\n    <p>Then there&apos;s the curation issue. While Google&apos;s app store is something of a free for all, Apple curates every app they add. You can get denied for any number of reasons, adding to development time and delaying your turnaround time on updates or new versions.</p>\n    <p>Then there are the technical hurdles. When developing for mobile you have to worry about:</p>\n    <ul>\n    <li><strong>Slow, intermittent Internet access</strong> &#x2013; We&apos;ve come a long way, but let&apos;s face it &#x2013; wireless Internet access isn&apos;t perfect. From dodgy cell connections to off-and-on WiFi, you can&apos;t assume everyone&apos;s connection is perfect.</li>\n    <li><strong>Many different types of devices</strong> &#x2013; If you&apos;re developing for iOS, no worries &#x2013; there a half dozen devices all running the same operating system. Easy. If you&apos;re developing for <em>anything else</em>, not so fast. Android in particular is a fractured nightmare with a dozen different versions on hundreds of different hardware configurations &#x2013; your app needs to work on as many of these as possible.</li>\n    </ul>\n    <p>That&apos;s not to say mobile isn&apos;t the future &#x2013; it is and you can&apos;t fight it. But there are downsides to betting everything on the same store.</p>\n    <h4><br>Websites and Web Apps</h4>\n    <p>Then there&apos;s the flip side &#x2013; the slightly older school approach with websites and web apps that are designed for desktops and laptops.</p>\n    <p>There are plenty of these tools &#x2013; especially in the B2B space where mobile isn&apos;t a perfect replacement for the powerhouse machines most offices have.</p>\n    <p>While the market is shrinking, there are still billions of desktop users out there and the environments are becoming more developer friendly as Windows consolidates and PCs start to look more and more like hybrid devices.</p>\n    <p><strong>How Website and Web Apps Are Sold</strong></p>\n    <p>Both Microsoft and Apple offer central app stores for their operating systems. If you choose to sell this way, you can benefit the same as you would from the mobile app store with all the same drawbacks.</p>\n    <p><br> The major difference between mobile and desktop, though, is that you don&apos;t HAVE TO do it. You can promote your apps through your own website, with an advertising campaign, by reaching out to influencers &#x2013; you can do whatever you want and if you run the sales through your own website you cut out a LOT of the margin-eating fees that app stores might charge.</p>\n    <p>But then there&apos;s the hassle of delivery, and technically speaking you need to be sure your apps can work in all environments. How is your web app designed and optimized for rendering engines and JavaScript engines being used in the major browsers?</p>\n    <p>That&apos;s no small task. It&apos;s also very time consuming (and expensive) to test, and that&apos;s not even considering all the different hardware configurations you&apos;ll likely deal with.</p>\n    <p>Instead of going through all of this over again if you have done the legwork and creating a new app for mobile, there is another option&#x2026;</p>\n    <p>Hybrid apps package the contents of a web app to a mobile device&apos;s ecosystem, allowing you to run the same experience through a mobile device. There are some hits to performance in the transition, but it&apos;s been getting better rapidly in recent years and with the advancements some companies have been making in shared code-base, this is only going to continue to get better.</p>\n    <p>The bottom line is that if you want your app in browsers and mobile devices, you can do it with very few exceptions. It will depend entirely on how much of a performance hit your app can handle.</p>\n    <h4>The Future of Web Apps</h4>\n    <p>There&apos;s good news though. This is changing. Lines are being blurred.</p>\n    <p>Mobile phones abide by Moore&apos;s law as much if not more so than desktops and laptops. The newest chips from ARM and others announced early in 2015 were 50 times more powerful than those chips in smart phones five years ago. Apple&apos;s chips have increased in power about the same amount in the same time period &#x2013; making those first iPhones look like bricks from the &apos;90s.</p>\n    <p>They are catching up and it&apos;s only a matter of time until small devices can handle big projects. Whether it&apos;s a projector, a dock, or just a really high resolution making it possible, even the most robust apps will be workable on a smart phone.</p>\n    <p>For this reason, hybrid apps make sense. It&apos;s the future, and if your product can be managed with today&apos;s technology as a hybrid solution, it will be better positioned for the next step when things start to get even better.</p>\n    <h3>How Internet Software Works</h3>\n    <p>Let&apos;s dive one level deeper and discuss how all this software actually works. What&apos;s going on, not only in front of your eyes but behind the curtain.</p>\n    <p>There are three elements in most modern Internet software:</p>\n    <ol>\n    <li>The client that your users will download, access, or open up when they need to use your software</li>\n    <li>The server that remains behind the scenes doing big heavy stuff</li>\n    <li>The cloud, a new addition to the landscape that has changed a lot of how we talk about the first two.</li>\n    </ol>\n    <p>Let&apos;s take a closer look at all three:</p>\n    <h4>The Client &#x2013; What the User Sees</h4>\n    <p>Software clients are both the shiny red paint job that gets people behind the wheel for a test drive and the surge of adrenaline when they hit the gas. They are what your users will interact with and will ultimately make their decisions on.</p>\n    <p>This is the app that your user downloads for their mobile device or the website where they go to login to the tool. With today&apos;s technology, the client is also extremely powerful and can do a lot more than it once did &#x2013; going as far as to negate the next two pieces of the puzzle.</p>\n    <h4>The Server &#x2013; Behind the Curtain</h4>\n    <p>The server is behind the scenes, pulling levers and running the big complicated stuff. If the client is your paintjob, this is the engine under the hood and for years this is where most of the actual work got done with Internet software.</p>\n    <p>Server-side software comes into play when there is a database &#x2013; a large store of information that needs to be accessed or worked on to enable the client to do its thing. Think of Facebook with its billions of user accounts. Sure you can see and interact with many of them, writing on their walls, posting videos, tagging photos &#x2013; that&apos;s all client-side stuff.</p>\n    <p><br> But the actual user information lives on the server and when you search for something, the gears start turning and the server goes to work digging through its massive database to find what you are looking for.</p>\n    <p>Here&apos;s the tricky part.</p>\n    <p>Not every piece of Internet software needs a server. A lot of tools are all client, fully self-contained in a single package. Think of the calculator app on your phone &#x2013; it just adds and subtracts numbers, no need for a server to give it the answer.</p>\n    <p>This is very important because software that uses a server means fees and operational costs on your end &#x2013; a big question mark when it comes time to outline your software. Alternately, you use the cloud.</p>\n    <h4>The Cloud</h4>\n    <p>As simply as I can put it, the cloud is a network of servers that work together do &quot;stuff&quot;. It is how we can get around costly server maintenance and backend-heavy applications. It also helps power easy and quick access to information from any app &#x2013; web or native.</p>\n    <p>Your email, Google Drive, Facebook, Dropbox &#x2013; those are all cloud applications because they allow you to do something in one place and access the information <em>anywhere else</em>.</p>\n    <p>There&apos;s a freedom involved that makes it infinitely more flexible than just another app. And it keeps getting more powerful. More often then not, the cloud represents existing software you can buy and integrate into your own.</p>\n    <p>Third party services like Mail Gun are a prime example.</p>\n    <p>One of the biggest hurdles in development is email server management &#x2013; specifically notifications. If someone does something in a web app, a notification needs to go out.</p>\n    <p>Mail Gun is a cloud based service that developers use to handle all of this without needing to worry about server maintenance. One big headache eliminated.</p>\n    <p>There will be many such headaches when you build your product &#x2013; third party cloud services are the first place to look as potential solutions that cost less and make life easier. There is zero reason to run your own mail server these days. It&apos;s a waste of time and energy and can lead to you getting hacked &#x2013; the cloud and the tools that utilize it make this possible.</p>\n    <h3>The Complete Software Lifecycle</h3>\n    <p>Before you start thinking software development is a breeze, let&apos;s take a look at the lifecycle. From start to finish there are seven stages, and believe me, you&apos;ll be cycling back through each of these <em>many</em> times.</p>\n    <p>It all starts with an idea or concept. Then it dives into Design, Development, Testing and Quality Assurance of the prototype, release of your initial product, and finally ongoing bug fixes and improvements, and new update releases. And if your software is successful, you&apos;ll loop back to the design and development phases again and again as you build out a tool that does everything you can imagine.</p>\n    <p>So what does this cycle look like in practice? Let&apos;s take a look at how this pans out and what you can expect from each of the seven steps:</p>\n    <h4>Step 1 &#x2013; Idea/Concept</h4>\n    <p>Skip this step at your own risk because understanding what your software will do and more importantly, how it will do it in a cool and exciting new ways is super important.</p>\n    <p>This is where you figure out the problem you want to solve and how you will solve it differently or better than every other developer out there. It&apos;s also where you determine who you target audience will be and how you are going to pitch the product to them when it&apos;s ready to ship.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>Not a dime &#x2013; your ideas, your time, and your research. This is all you.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Pin down who the software is for</li>\n    <li>Outline the problem you are solving</li>\n    <li>Create a list of features your app will have</li>\n    <li>Outline what the app will look like</li>\n    <li>Create a list of similar tools and features</li>\n    </ul>\n    <h4>Step 2 &#x2013; Design</h4>\n    <p>How will your software look, what are the interface requirements, what is the workflow from one screen to the next, and how is information recorded when an action is taken? The design stage is where all of these big questions are answered.</p>\n    <p>Design is about more than just &quot;play random music based on a user&apos;s suggestion&quot; &#x2013; that&apos;s an idea not a design. Design is about describing HOW the idea will be realized and implemented in a realistic, easy to use, and effective interface by your users.</p>\n    <p>It&apos;s why this is one of the ONLY areas I recommend you seek out professional help &#x2013; get a second pair of eyes on your design before going to development to make sure you&apos;re not missing anything.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>Totally free as long as you&apos;re working on the design alone (which you should).</li>\n    <li>When done, though, consider throwing a couple hundred dollars to a pro to review your designs and point out any holes.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Map out every screen of your app</li>\n    <li>Create a workflow for the user&apos;s actions</li>\n    <li>What colors and design elements will be used in the interface</li>\n    <li>How is information recorded</li>\n    <li>Is the software client only or does it require a server-side component</li>\n    <li>What features will you buy vs. build?</li>\n    </ul>\n    <h4>Step 3 &#x2013; Develop</h4>\n    <p>With a design in hand, your developer (or you) can go to town, writing the code that will do all the awesome stuff that&apos;s been outlined.</p>\n    <p>This isn&apos;t paint by numbers, though. Development requires a level of flexibility and creativity that allow the software to do what it needs to do within budget, time, and feature restrictions. Your design might call for some really cool stuff &#x2013; the developer&apos;s job is to make it a reality in the most efficient (and effective) way possible. Version 1.0 isn&apos;t about making it perfect. It&apos;s about making it work.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>Ideally, do this yourself and don&apos;t spend a dime.</li>\n    <li>For those who can&apos;t or don&apos;t know how to do this solo, spend whatever you can. Whatever your total budget is, subtract all other expenses and the rest goes into development. And because all development budgets will balloon to double their starting point, divide that number by two and you have your budget for development. Realistically, you&apos;re looking at $5,000 for a small-medium sized app to be developed to a decent version 1.0.</li>\n    <li>When hiring a developer, be sure to include the cost of revisions and bug fixes in the contract to make sure not only that they will be available but that there will be no surprises.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Create a working prototype of your product</li>\n    <li>Create a working model that handles all basic functions</li>\n    </ul>\n    <h4>Step 4 &#x2013; Test/QA</h4>\n    <p>Of course, even the most creative and flexible developers make mistakes. Software is as much about finding and fixing mistakes as it is about building the mechanism. Testing and Q/A should be completed by as many different people as possible &#x2013; bringing in your friends and family if necessary to go through each and every step of the software and find even the tiniest bugs.</p>\n    <p>Of course, when it comes to iterating and launching new software, sometimes some bugs are a bigger deal than others &#x2013; you can&apos;t fix everything so this phase is also about prioritizing what makes your software work vs what makes it &quot;nice&quot;. With that said, always focus on fixing bugs before adding new features.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>Don&apos;t skimp on testing. It&apos;s the last barrier between bad software and your customers. Decent Q/A testing will cost you $10/hour and expect 20-40 hours for solid testing. Total budget here will be between $200 and $400.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Identify any major, platform breaking problems</li>\n    <li>Get the software to the point it can be released</li>\n    <li>Create a list of future bugs and improvements</li>\n    </ul>\n    <h4>Step 5 &#x2013; Release</h4>\n    <p>Now it&apos;s time to get your app out there. Don&apos;t delay on this step any longer than is strictly necessary. Build your prototype and get it out the door as soon as possible &#x2013; the sooner you get feedback on what your software does right (and wrong), the sooner you can start improving on it and making money.</p>\n    <p>Don&apos;t make this stage into something bigger than it is &#x2013; the goal is to get it out, not to agonize over every detail and hold it up.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>Some app stores charge fees for uploads and updates, but most are free or close to it. Costs here are nominal.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Launch the software!</li>\n    <li>Acquire your first users and get feedback fast</li>\n    <li>Ask for input on new features and bug reports</li>\n    </ul>\n    <h4>Step 6 &#x2013; Bugs &amp; Improvements</h4>\n    <p>Your users are going to find bugs. They&apos;re also going to find new features they want, tweaks they&apos;d like to see made, and a hundred other issues that will fill up your inbox as quickly as they can write them.</p>\n    <p>This is good. It means they care. The key now is to prioritize those things and start fixing them. Create a log of the most vital changes and knock them out in small batches, as quickly as possible but without delaying each release update.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>For every bug you find, you&apos;ll need to document it somewhere. A spreadsheet isn&apos;t going to cut it &#x2013; so you&apos;ll likely want to pay for something better. Expect a small monthly fee.</li>\n    <li>When you fix a bug, you&apos;re paying a developer so expect more development costs for every iteration on your software.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Identify any bugs that are reported</li>\n    <li>Add bugs to a log and address them</li>\n    <li>Address the most important bugs first</li>\n    <li>Get the software to the point it can relaunch</li>\n    </ul>\n    <h4>Step 7 &#x2013; Release Updates</h4>\n    <p>Finally, there&apos;s update releases. Internet software is updated and patched nearly constantly, and because it all happens in real time, most people don&apos;t realize updates have been made. Trust me, every tool you use online is being updated at least once a week, if not more often &#x2013; with tiny bug fixes, new feature releases, and a million more things that you may not notice for days or weeks.</p>\n    <p>Step 6 and 7 will recur for as long as your product exists. Short of shutting the whole thing down, this is a near constant process. If you have to keep doing this, it&apos;s a good sign.</p>\n    <p><strong>Costs</strong></p>\n    <ul>\n    <li>The costs here are all customer service overhead. Talking to people, fixing updates, and communicating new changes. At this point, this should be all you.</li>\n    </ul>\n    <p><strong>Goal</strong></p>\n    <ul>\n    <li>Create a regular schedule for software updates</li>\n    <li>Relaunch and communicate to users the changes</li>\n    <li>Get new feedback on how the updates operate</li>\n    <li>Perform testing and Q/A to ensure bugs are fixed</li>\n    </ul>\n    <h3>What Your Costs Will Look Like</h3>\n    <p>The cost of software development can spiral out of control quickly if you don&apos;t plan for it. I&apos;m going to point out a lot of decisions you&apos;ll be making in the next seven days that will impact cost and how you can safely cut corners without hurting the final product. To start, though, let&apos;s look at what you&apos;ll be spending on administrative, development, and ongoing costs.</p>\n    <h4>Administrative Costs</h4>\n    <p>This is your people time &#x2013; the hours you and anyone you hire (or beg) to work for you spend on developing and managing your software.</p>\n    <p>Early on, this is practically nothing. Other than your own time, which you can use as much as you want (until it runs out of course), there&apos;s no cost to administrate this kind of project.</p>\n    <p>It gets worse with time though. As your software grows and you bring on users, admin will become a bigger part of the puzzle:</p>\n    <p>Billing. Support. Sales. Account management.</p>\n    <p>If you have to deal with these things, you&apos;re in a good place, but you should also be prepared for the costs they&apos;ll incur. It gets expensive fast. For now, do it yourself and save some money.</p>\n    <h4>Development Costs</h4>\n    <p>Development costs should be the bulk of your budget. Subtract everything else you need and there&apos;s your development budget &#x2013; spend as much as you possibly can because the gap between a cheap developer and a decent one is a mile wide.</p>\n    <p>If you can do this yourself, of course, you save a TON of money, but for those that aren&apos;t quite at that level writing code, expect to spend upwards of $5,000 for a solid version 1.0 of your small-mid sized app. And realistically, that means you should budget for about $2,500 because no good project is complete without cost overruns.</p>\n    <p>Whatever amount of time your developer quotes, double it and there&apos;s your final budget.&#xA0;</p>\n    <h4>Ongoing Costs</h4>\n    <p>This is all the little stuff you&apos;ll have to pay for every month &#x2013; the services, fees, maintenance and everything in between that goes on your credit card and that can add up to a small fortune if you&apos;re not careful.</p>\n    <p>Are you beginning to see why quitting when success doesn&#x2019;t happen fast enough is a good idea?</p>\n    <ul>\n    <li><strong>Server Maintenance</strong> &#x2013; Everything falls apart without this. Don&apos;t be afraid to invest wisely in a server that will stay up and run smoothly all the time. Hire a third party to do it for you and make sure there is redundancy &#x2013; downtime costs money and hurts users.</li>\n    <li><strong>Customer Support</strong> &#x2013; Support is very important, but right now you can handle this. Unless your app goes mega-viral and you need to bring people on to man the phones (good problem to have), handle any requests or issues on your own to keep this cost under control.</li>\n    <li><strong>Third-Party Services</strong> &#x2013; There&apos;s a laundry list of third party services to keep in mind &#x2013; payment processing, video delivery, software you purchase for in-house management, invoicing, email notification delivery &#x2013; the list gets long, fast.</li>\n    <li><strong>Fees</strong> &#x2013; Everyone takes their cut. Expect fees on all transactions as well as data usage for cloud tools like Amazon S3, and server fees if your bandwidth goes too high.</li>\n    </ul>\n    <p>The bottom line is that creating and selling software gets pricey. The fewer costs you need to incur just to launch your product, the better. The good news is that most of these costs don&apos;t scale up with the business &#x2013; up front is the most expensive part of development, so keeping the costs down now will benefit you both now and later.</p>\n    <h3>Build vs. Buy</h3>\n    <p>Here&apos;s the coolest part.</p>\n    <p>You don&#x2019;t have to build everything. There are a lot of very smart developers out there building really cool stuff.</p>\n    <p>Nobody builds anything truly from scratch because they don&apos;t have to. Anyone who does is making a rookie mistake.</p>\n    <p>But there are some things you&apos;ll want to build &#x2013; features and tools that don&apos;t exist elsewhere or that you don&#x2019;t want to incur a whole bunch of extra costs on.</p>\n    <p>When building, you&apos;ll have to deal with ongoing costs, maintenance, support, and a whole lot more, exponentially increasing your costs. Buying software or tools that fill gaps in your product eliminates a lot of that headache, but there will be monthly fees and there&apos;s downtime &#x2013; a lot of it that you&apos;ll need to mitigate throughout development.</p>\n    <h4>When to Build vs. Buy</h4>\n    <p>You can&apos;t buy 100% of the pieces needed to launch a product. You&apos;ll need to build something &#x2013; a bridge between the other tools that are out there that makes it all work together smoothly. This is what makes you special. What you build will be your unique addition to the industry and will help your product stand out &#x2013; everything else is just there to make it work.</p>\n    <p><br> But there are limits to when and how you should do this. Why? Because it&apos;s damn expensive. Here are some of the costs you&apos;ll be looking at:</p>\n    <ul>\n    <li><strong>Ongoing Costs</strong> &#x2013; The ongoing costs can be pretty darn big. There&apos;s the actual development time of your developer, time spent fixing bugs and updating software with each revision, and the time spent performing QA and testing on each of those updates. All that time means money out of your pocket.</li>\n    <li><strong>Maintenance Costs</strong> &#x2013; If you launch a web app or your mobile app requires server communication, you&apos;ll need to pay ongoing maintenance costs for those servers. Additionally, apps that are in app stores or on frequently updated equipment need to be updated as well &#x2013; new operating systems are a big cost point for app development, usually resulting in new updates needed 2-3 times per year.</li>\n    <li><strong>Support Costs</strong> &#x2013; If someone has a question, there needs to be a human on the other side to answer it. If you built the software, that someone is you. While bought software gives you a resource to turn to for answer to such questions, in-house built software requires you to do the extra legwork on your own.</li>\n    </ul>\n    <p>The bottom line is that when you build something, <em>you</em> are responsible for it. You can&apos;t ping customer service and complain because you <em>are</em> customer service and if you can&apos;t afford to keep it running smoothly, your product is going to have problems. So only build if it&apos;s a core part of your business or product.</p>\n    <h4>Buy Everything Else</h4>\n    <p>So once you know what you need to build on your own, you can buy the rest. The costs here are minimal, though there can be downsides, so play it safe when buying other tools. Some things you&apos;ll need to consider include:</p>\n    <ul>\n    <li><strong>Monthly Fees</strong> &#x2013; If you purchase something, you&apos;re licensing the technology, and a license is recurring cost. Every month or every year depending on the terms, you&apos;ll need to pony up a hefty chunk of change for every tool you buy. Some tools cost more than others, but it&apos;s a very real expense to keep in mind.</li>\n    <li><strong>Extra Downtime</strong> &#x2013; When support is needed, the wait can be longer than if you handle it in house. It slows down operations and if there is a third party involved such as a vendor, the time can extend even longer. This leads to extra downtime as well when updates are made.</li>\n    </ul>\n    <p>But you&apos;ll also get to remove all of the nasty, unwanted bits of the software lifecycle, streamlining how you iterate and update your tools. It&apos;s faster and a lot easier.</p>\n    <p>Great software is a combination of the above &#x2013; it&apos;s a result of buying what already exists and gluing it all together with the product or service you are creating mixed in as needed. It&apos;s faster, cheaper, and more effective than just building it all from scratch, and it&apos;s the only way to really launch something quick and with minimal risk.</p>\n    <p>In short, it&apos;s what you should do. The real question now becomes; how do you do it?</p>\n  </section>\n\n</article>\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter1"
            ],
            [
              "chapter:number",
              "1"
            ],
            [
              "chapter:day",
              "Sunday"
            ],
            [
              "chapter:title",
              "Learn"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/02-monday-idea/toc.html": {
    "revision": 1503356386000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/02-monday-idea/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n\n<article>\n  <section>\n    <h1>Get an Idea</h1>\n    <p>Today I&apos;m going to ask you two important questions and then help you answer them. Why? Because far too many people skip this step and dive head first into the deep-end, only afterwards remembering they don&apos;t know how to swim.</p>\n    <p>My goal &#x2013; don&#x2019;t let you drown. And to keep from drowning you need an idea.</p>\n    <p>So here are my questions:</p>\n    <ol>\n    <li>Do you have an idea for a product?</li>\n    <li>If so, are you right for that idea?</li>\n    </ol>\n    <p>Throughout the course of today we&apos;re going to talk about how to identify what you truly care about, how to match your expertise to that passion, do your research, and then make sure all of that equals a product people will actually pay for.</p>\n    <p>But before we get that far, let&apos;s start with the second question because, honestly, this is one of the biggest mistakes you can make &#x2013; chasing what sounds like a brilliant idea down a rabbit hole for days, weeks, or even months when you&apos;re not the right fit for it.</p>\n    <p>How many times have you thought &quot;why didn&apos;t I think of that&quot; when you see a new product hit the market? You&apos;re not alone. We&apos;ve all hit ourselves over the head at some point for now being faster, smarter, or more motivated than the next big startup founder.</p>\n    <p>But even if you had thought of it first, you probably weren&apos;t the right person for that idea.</p>\n    <p>There&apos;s nothing special about Twitter. Especially when it started, it was a scaled down, feature-barren version of bigger, better social networks. Anyone could have made Twitter, but it only became popular because it had the right team and support at the time it was built.</p>\n    <p>Here&apos;s another example &#x2013; I could dream up the world&apos;s greatest phone, solving every problem you can imagine that Android or iPhone devices have. But I&apos;ve never built a phone, nor have I worked in the industry &#x2013; me making a phone would be a catastrophic mistake.</p>\n    <p>Would building a phone be impossible? Maybe not, but I&apos;m definitely not the right person to do it.</p>\n    <p>The same will be true for you and a lot of the ideas you have. There will be more than one that you look at and think, &quot;<em>dang, this is a good idea&quot;, </em>but simply don&apos;t have the resources or experience needed to make it a reality.</p>\n    <p>Don&apos;t worry about it. There are plenty of good ideas out there &#x2013; plenty of problems you can solve or ideas you can manifest as new products. Don&apos;t get hung up on one you&apos;re not the right person to pursue. Save it or sell it but don&apos;t build it.</p>\n    <h2>What Do You Care About?</h2>\n    <p>With that out of the way, let&apos;s dive into the first question. Do you have an idea?</p>\n    <p>If the answer is no, or if I just shattered your hopes and dreams and you need something new (sorry about that), there are three quick steps you can go through to find and validate a good idea for your product.</p>\n    <p>Remember, we&apos;re doing this quick &#x2013; spend today working on this and no more. Don&apos;t stress out for days or weeks, worrying that it&apos;s the wrong idea. If it&apos;s a bad idea, no one will buy it and you can move on &#x2013; you&apos;ll know soon enough.</p>\n    <p>To get started, we need to look at what you care about, then how the research supports your interests and finally what people actually want and need in that space.</p>\n    <h3>Your Interests</h3>\n    <p>Should you ONLY work on things you enjoy? Not necessarily, but if you have at least a passing interest in the industry for which your product will be used, you&apos;ll be much more successful than if you pick something you could not care less about.</p>\n    <p>So step one is to create a list of all the stuff you care about. What are you interested in? What do you do in your spare time? What kind of books do you enjoy reading?</p>\n    <p>Make a massive list of stuff. Don&apos;t worry about what&apos;s practical or marketable right now &#x2013; just write down what you like. Aim to build a list of at least 50 different things you like. Go to a site like mindmup.com and create a Mind Map that links these ideas together if you want to organize it, but don&apos;t spend too much time trying to categorize. Just get them on the paper.</p>\n    <h3>What Do You Want to See Changed?</h3>\n    <p>Now, what really drives you crazy? What experiences in your life, whether they relate to the above list or not, do you want to see changed.</p>\n    <p>We all have them. Google&apos;s engineers created Gmail as a side project because existing email was so clunky and dull. Zuckerberg created Facebook because the existing social networks were an immature mess and he wanted something cleaner for communicating with his classmates (and later the world).</p>\n    <p><br> Don&apos;t worry about the actual solution right now &#x2013; just focus on the problem itself. What drives you crazy and why is it such a pet peeve? Here are some examples to get you started:</p>\n    <ul>\n    <li>Cluttered ads on websites</li>\n    <li>Sluggish or feature-barren apps</li>\n    <li>The cost of microtransactions in games</li>\n    <li>Digging through countless cruddy articles to source for school work</li>\n    </ul>\n    <p>Try to think of at least 10 of these &#x2013; more is okay, but make sure it&apos;s a decent sized list to get you started.</p>\n    <h3>Where&apos;s Your Passion?</h3>\n    <p>Through all of this, what we&apos;re driving towards is passion. Too many people focus first and foremost on what they are good at &#x2013; hoping to leverage their skills and expertise to create something profitable.</p>\n    <p>But being good at something doesn&apos;t mean you care about it.</p>\n    <p>I&apos;m good at a lot of things I don&apos;t particularly enjoy. Doesn&#x2019;t mean I want to create a product around them. Don&apos;t make that mistake &#x2013; it&apos;s boring.</p>\n    <p>Why bother if you&apos;re bored?</p>\n    <p>Stay true to yourself, focus on what you care about and forget the rest. The odds are you&apos;ll walk away from all this with more than one good idea. Awesome - you have a backup list.</p>\n    <h2>Do Your Research</h2>\n    <p>Notice how you don&apos;t have an actual idea yet?</p>\n    <p>Not a big deal &#x2013; we are going to gather a few more important pieces of information before we get to that step, giving you more resources to make your decision.</p>\n    <p>When it comes to research, you want to answer two questions:</p>\n    <ol>\n    <li>What does the market support?</li>\n    <li>What problems are people seeking answers to?</li>\n    </ol>\n    <p>After all, if there isn&apos;t a big enough market for your product, why build it? If only a couple hundred people could <em>ever</em> need your software, it might be a fun project, but it won&apos;t be profitable. We need to make sure both are covered.</p>\n    <h3>Market Support</h3>\n    <p>The market supports some crazy stuff. Who would have thought that people would buy artisanal water en masse or that we could need (and support) dozens of Twitter clients &#x2013; each of them doing almost exactly the same thing with a small unique twist.</p>\n    <p>But the market supports it and these guys make money (most of them anyways). So before going any further, let&apos;s look at which of your interests and pet peeves have markets big enough to support product ideas.</p>\n    <p>There are dozens of places you can look for this kind of data but we don&apos;t need a comprehensive market research study to tell us people care about our interests. We can just look online. Here&apos;s where:</p>\n    <ul>\n    <li><strong>TED Talks</strong> &#x2013; TED talks are famous for connecting brilliant people in interesting roles with a large online (and live) audience to discuss topics important to our time. Some of these talks are stories, others are ideas, and others still are arguments for social change, but they are generally held by people at the forefront of their field and are a good place to see what is considered &quot;important&quot; in the here and now.</li>\n    <li><strong>Mixergy Interviews</strong> &#x2013; Mixergy interviews the best and brightest minds from the startup world (and others) to discuss everything from creating a business to past success (and failure) stories, and much more. The site offers more than 1200 interviews and 180 courses and while some are junk, a number of them will give you a good idea of what&apos;s trending here and now in the startup world.</li>\n    <li><strong>Amazon Reviews</strong> &#x2013; This is as simple as it gets. What are people buying right now on Amazon? Set a threshold and look for products that get at least that many reviews. Keep in mind that the average product receives reviews from only 1 in 1,000 buyers &#x2013; so if you see a product with 1,000 reviews, assume upwards of a million sales. It doesn&apos;t mean you&apos;ll do the same, but it does mean there&apos;s an audience for it.</li>\n    <li><strong>iTunes Reviews</strong> &#x2013; The same holds true on iTunes. Are people downloading the crap out of a certain genre of podcast or information about certain topics from multiple podcasts? Look at the rankings and reviews on the iTunes store for podcasts, apps, movies, books &#x2013; whatever best reflects the verticals in which you are doing research.</li>\n    <li><strong>Alexa Rankings of Top Blogs</strong> &#x2013; Alexa ranks the world&apos;s websites based on a bunch of third party factors. The bottom line though is that the lower the number, the more eyeballs a site gets. Look for blogs in your niche of choice that have an Alexa rating of 10,000 or lower &#x2013; that&apos;s a good sign that people care enough to read about it and in turn possibly buy products related to it.</li>\n    <li><strong>Forum Size</strong> &#x2013; If your audience cares about the subject you&apos;re working on, they will gather together and complain about it. Look for forums where this is happening and tap into the conversations being held there. TheBiggestBoards.com is a useful tool for finding which sites have the most users and posts &#x2013; look for ones that match your niche. This is where your audience is gathering.</li>\n    </ul>\n    <p>What we need to know right now is whether there are enough people in these markets to buy what you might someday sell and whether they are already spending money in those markets. So we&apos;re gauging interest and capitalization.</p>\n    <p>If you find a ton of people talking about the same things as you and they are spending a LOT of money on products related to those topics, you&apos;re set.</p>\n    <h3>Where Are People Asking the Most Questions?</h3>\n    <p>Using the above research, you should be able to pare down your list of interests and pet peeves to a handful of potentially profitable markets.</p>\n    <p>Now, we want to find where people are actively looking for solutions to problems. What are the biggest and most frequent questions in these spaces? Are there multiple issues you can address? One big one?</p>\n    <p>Don&apos;t worry about whether other people are already solving the problems you find &#x2013; right now we&apos;re just looking for problems and making a list.</p>\n    <p>This will help us gauge how urgent the market need is.</p>\n    <p>When it comes to a startup with a small (or non-existent) advertising budget, urgency is your best friend. If you solve a problem people have been struggling with for a long time (or do it better than the other guys), your product will practically sell itself.</p>\n    <p>Right now we&apos;re looking for those kinds of problems. Here&apos;s where to start your search:</p>\n    <ul>\n    <li><strong>Craigslist Gigs</strong> &#x2013; Are people asking people to solve problems on Craigslist and pay for it? If someone is willing to pay someone any kind of fee to fix the problem you&apos;re also looking to fix, it&apos;s a good sign that your product will have buyers. Look for recurring gigs in multiple locations that show people aren&apos;t finding the automated tools that can do the job for them.</li>\n    <li>UpWork <strong>Projects</strong> &#x2013; UpWork is a more formalized freelance network. There are others &#x2013; Freelancer.com and Guru also offer the same type of services. You can search projects for free without logging in &#x2013; see what kinds of jobs people are posting and how you can fix those problems more easily with software.</li>\n    <li><strong>LinkedIn and Facebook Groups</strong> &#x2013; For more business-focused discussions, turn to LinkedIn and for more personal conversations, Facebook. Both sites will guide you to see the most common questions and problems people have and the advice they give each other.</li>\n    <li><strong>YouTube How-To Videos</strong> &#x2013; Look for the most popular and frequently viewed videos in the how-to section of YouTube for your particular niche. Are people viewing problem solving videos tens of thousands of times? If so, this is an area of real opportunity.</li>\n    <li><strong>New Technologies or Platforms</strong> &#x2013; Anytime a new technology or platform hits the market and grows rapidly, there&apos;s room for someone to provide useful third party tools for it. Look at how many Twitter bots and clients there are now, or how many photo filtering and editing apps for Instagram and Pinterest. People want that extra bit of functionality that these apps or tools don&#x2019;t offer out of the box &#x2013; your product can provide it to them.</li>\n    <li><strong>Common Searches in Google/Amazon</strong> &#x2013; Finally, look at what people are searching for. Google doesn&apos;t provide data on their search traffic anymore, but you can circumvent that by using their AdWords Keyword Planner &#x2013; a tool they provide to advertisers to estimate what it will cost to advertise with them. You&apos;ll need a free AdWords account to use it, but it&apos;s worth it. You can also view Google Trends to see what is trending and how it has risen or fallen over the last few months or years.</li>\n    </ul>\n    <p>The Internet is a treasure trove of data &#x2013; people are <em>constantly</em> complaining. If you can find the bulk of those complaints, your future customers will pretty much tell you exactly what they want you to build.</p>\n    <p>How easy is that?</p>\n    <h2>The Inefficient Solution</h2>\n    <p>At this point, you&apos;ve narrowed down your list of interests and pet peeves to a handful of ideas that have a large enough market, the possibility of profit, and people out there actively looking for solutions to problems.</p>\n    <p>Anything on your list right now is a good idea, but there&apos;s one more step to help you build a product that will stand out as something truly special.</p>\n    <p>This is all about honesty. You&apos;re not reinventing the wheel here. Whatever you&apos;re making probably isn&apos;t unique or new or revolutionary.</p>\n    <p>Heck, <em>new </em>stuff tends to fail faster than tried and true ideas. If no one has ever done it before, why do you think that is?</p>\n    <p>So rather than looking for an angle that is 100% unique and stands out from all of your competitors in a way that will make you look like the smartest person in the room, let&apos;s go the slightly easier route.</p>\n    <p>Take what other people are already doing and do it better.</p>\n    <p>Apple has crafted a multi-billion-dollar business model on this &#x2013; taking niche ideas and forward thinking technology that was ahead of its time and making it accessible to a larger audience.</p>\n    <p>There are solutions out there to almost any problem you can think of, but the vast majority of them are inefficient.</p>\n    <p>When you look at the problems you have or the pet peeves you have with existing solutions, ask yourself what you would do different. How would you do it better? Faster? Cheaper?</p>\n    <p>Make a list of what you would do that the current product doesn&apos;t and start thinking about ways that a new version of that software would look and operate if it was rebuilt from the ground up.</p>\n    <p>This is what your product is going to look like &#x2013; it&apos;s going to be something that:</p>\n    <ul>\n    <li>Interests you</li>\n    <li>Addresses a problem you hate</li>\n    <li>Has an active online market</li>\n    <li>Can be sold to an already spending audience</li>\n    <li>Solves a common problem or question</li>\n    <li>Does it all better than whatever&apos;s already out there</li>\n    </ul>\n    <p>If your idea does those six things, you&apos;re ready to go. The next step is to make sure you have a good idea before investing in it.</p>\n    <h3>The Hacked Solution</h3>\n    <p>One of the more interesting things you&apos;ll find at this point in your research is that there are a lot of custom hacking solutions out there. This is where someone looked at the landscape and all the bullets you just listed above and thought &quot;damn, I should hack all this stuff together&quot;.</p>\n    <p>There are real opportunities for your idea to do something just like this &#x2013; here are some examples of extremely successful companies that have built their entire model on hacking existing tools together:</p>\n    <ul>\n    <li><strong>HubSpot</strong> &#x2013; Hubspot doesn&#x2019;t do any one thing better than the various tools it gathers together. There are better blogging platforms, better social media management tools, better analytics systems, and better CRMs, but none of them are integrated into ONE system that does it all in a single interface. Rather than trying to outdo the features of the tools it was cobbling together, HubSpot improved on the experience of using those tools. It&apos;s now a 9-figure public business and growing fast.</li>\n    <li><strong>Zapier</strong> &#x2013; Zapier&apos;s business model is quite literally to cobble together other tools. By tapping into the API of dozens of popular web apps, Zapier allows you to create custom &quot;zaps&quot; and send data or trigger actions between those apps. It solves a huge problem by using the tools already available in other systems and tying them together.</li>\n    <li><strong>HootSuite</strong> &#x2013; Logging into every social channel and posting manually? Not a chance. Any business or marketer with more than two channels to post to uses HootSuite (or one of its many imitators). Scheduling, multi-user access, and a dozen other features make it a must for social media posting.</li>\n    </ul>\n    <p>There are a lot of jobs out there that use a spectrum of tools to accomplish a single goal. If you can create a product that combines those tools, creates something new that addresses all of them, or just makes an existing process more efficient, you could have a hit on your hands.&#xA0;</p>\n    <h2>Validating Your Awesome Idea</h2>\n    <p>This is the moment when you&apos;re full to the brim with energy &#x2013; texting friends, writing furiously and daydreaming of yourself on the beach with attractive companions showering you in hundred dollar bills.</p>\n    <p>Snap out of it for a second &#x2013; that surge of emotion when you think of the <em>perfect</em> idea is awesome, but it can blind you. A really good idea can be drowned out in enthusiasm to the point that you miss some glaring problems before the investment starts.</p>\n    <p>This is where we do our reality check and make sure all the data we just pulled (alone!) is actually accurate.</p>\n    <p>This is where you ask people, run it by friends and family, do some additional hands on research, and make sure your idea is as good in the minds of others as it is in yours.</p>\n    <h3>Ask OTHER People</h3>\n    <p>What&apos;s the one thing every step today has had in common? You did it all by yourself.</p>\n    <p>While this makes things super efficient, it can also lead to problems. You start to get biased and make decisions without getting them validated (or at least proofed) by someone who knows more than you.</p>\n    <p>And yes there are plenty of people out there who know A LOT more than you, so let&apos;s ask them what they think. Start with:</p>\n    <ul>\n    <li><strong>Survey the Market</strong> &#x2013; Unless you have a big ass list of people you&apos;ve gathered together that you can email, this will cost some money, but it&apos;s worth it if you&apos;re still not sure exactly how to tackle the idea you&apos;re forming. SurveyMonkey offers relatively affordable survey services to people you don&apos;t know and you can ask them as many questions as you want. You can also run polls on Facebook or join a bunch of groups and just start asking people for their thoughts.</li>\n    <li><strong>Ask Friends and Family</strong> &#x2013; Your immediate circle of friends and family are a good place to start as well, but don&apos;t let their opinion be the end all of your decision. They love you, but they don&apos;t always support you, and that&apos;s okay, but you should also learn when to ignore them and just keep hustling. Get a good consensus, some honest feedback, and a few ideas for what to do next.</li>\n    <li><strong>Call Experts in the Field</strong> &#x2013; Finally, you can reach out to experts in the field and ask them for their honest opinions. Interview someone who&apos;s built a product in the field you&apos;re looking to get into. This won&apos;t cost you anything except some confidence and a bit of time.</li>\n    </ul>\n    <p>This stuff takes a bit of time, it might even cost a bit of money, and it can delay your decision on this somewhat, but trust me when I say it&apos;s 100% worth the extra effort. If you skip this step, you will undoubtedly regret when the first complaint comes in with an obvious statement that you didn&apos;t think of.</p>\n    <p>Don&apos;t proofread your own work and don&apos;t build a product out of an idea you haven&apos;t run by other people first.</p>\n    <h3>What if Someone Steals It?</h3>\n    <p>Some of you are wondering right now if sharing your brilliant idea with a bunch of people you don&apos;t really know is a good idea.</p>\n    <p>Don&#x2019;t worry about it.</p>\n    <p>People are always concerned about their idea being stolen. Don&apos;t be. No one is going to steal your idea. Even if they were, if it was that easy to steal, it&apos;s not that good of an idea in the first place.</p>\n    <p>Your idea is unique to you, your experience, your passion, and your resources. If someone has exactly the same of all of those, good luck to them &#x2013; think of something better. But seriously, it won&apos;t happen. Get their advice and use it wisely &#x2013; you&apos;ll need it.</p>\n    <h3>When to Ignore Advice</h3>\n    <p>There&apos;s a reason I put this section towards the end. Good ideas die fast when someone you respect says horrible things about them. And sometimes they to it for no reason other than that they don&#x2019;t understand what you are doing or why.</p>\n    <p>Ideally you&apos;re looking for feedback only from the people in your life who are most supportive of you.</p>\n    <p>The friends who think this is awesome. The family who love you and want to see you succeed. The experts who went through the same crucible and enable others to succeed with their advice.</p>\n    <p><br> But there are some people who will throw shade on any idea they didn&apos;t come up with on their own. They&apos;ll nitpick everything to death, point out where it could fail, or try to discourage you from even trying.</p>\n    <p>These people are poison &#x2013; whether it&apos;s a best friend, a girlfriend or boyfriend, or one of your parents, avoid poisoning one of your best ideas.</p>\n    <p>If nine people tell you it&apos;s a winning idea and the tenth strikes out with a bucket of negative energy, step back and think on it. Don&apos;t let one person&apos;s negativity kill what you&apos;re building. Stay positive &#x2013; you&apos;re going to need it.</p>\n    <h3>Sleep On It</h3>\n    <p>At this point, you should have a pretty clear idea of what you&apos;re going to build. You&apos;ve stripped away all the &quot;this would be cool&quot; style ideas and narrowed down to the ones that have a real chance of making you some money while being interesting and fun to work on.</p>\n    <p>But don&apos;t move forward just yet.</p>\n    <p>Take a step back and wait another day. Tomorrow morning, look back at all of what you just put together and think about whether this is what you really want to invest in for the rest of the week.</p>\n    <p>Is <em>this</em> the right idea for you? A little bit of distance and some time to sleep on it never hurt.</p>\n    <p>This is where you ask the very first question we addressed one more time &#x2013; is this the right idea for <em>you</em>? And if you&apos;ve gotten some of the negative feedback we just talked about, give it some time to fade. Set aside everything you&apos;ve just absorbed and come back at it fresh to determine if this is worth your investment.</p>\n    <p>This is the ONLY thing in this book I don&apos;t want you to rush through. Don&apos;t sit back and wait forever to make a decision, but don&apos;t rush into it either. Bad things happen with rushed ideas.</p>\n    <p>You can find the best online <a href=\"http://html-css-js.com/\" rel=\"nofollow\">HTML, CSS and JavaScript</a> tools in one place. Online editors, code optimizers and more.</p>\n  </section>\n</article>\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter2"
            ],
            [
              "chapter:number",
              "2"
            ],
            [
              "chapter:day",
              "Monday"
            ],
            [
              "chapter:title",
              "Get an Idea"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/03-tuesday-research/toc.html": {
    "revision": 1503356395000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/03-tuesday-research/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n\n<article>\n  <section>\n    <h1>Research &amp; Refine</h1>\n    <p>This is where a lot of people get longwinded. All those <em>words </em>behind the business plan, marketing mumbo jumbo, and strategic direction &#x2013; all the <em>planning</em> stuff that, to be honest, can waste a lot of time.</p>\n    <p>I&apos;m going to keep this section as short as possible for two good reasons.</p>\n    <ol>\n    <li>You want to get to the next step and build a product!</li>\n    <li>If you&apos;re working on a project that legitimately requires this stuff, move to the next idea</li>\n    </ol>\n    <p>The whole goal here is to get something up FAST. If you&apos;re spending hours researching competitors and plotting out the marketability of your product &#x2013; that&apos;s time you&apos;re not spending actually building the product.</p>\n    <p>It&apos;s a waste.</p>\n    <p>But there are some important bits here &#x2013; things you <em>should</em> think about at least for a moment before diving into your first product.</p>\n    <p>We&apos;re going to take a closer look at the market into which you&apos;re launching your product, the competitors (at least the ones you have to worry about), and how to talk about and promote what you&apos;re doing.</p>\n    <p>With some ammunition in the chamber, we&apos;ll then dive into actually creating the product.</p>\n    <h2>Market Analysis</h2>\n    <p>Back on Sunday we talked about the the big picture for the whole thing &#x2013; how apps have evolved and are straddling that hybrid line between web-based and native. How technology has evolved, and where people are more likely to spend their time.</p>\n    <p>Now we need to look at where those factors intersect the product idea you&apos;ve generated. What are other companies doing in this space and who are your ideal customers &#x2013; basically, who&apos;s already selling here and how are you going to join them?</p>\n    <h3>The Big Picture</h3>\n    <p>We&apos;ll get to the competitors in a moment, but first, what does this space look like right now from a 50,000-foot level? What&apos;s selling? What&apos;s new? What&apos;s the biggest problem people face?</p>\n    <p>If your product is to help people find better apps for their device, you would look at the saturation of app stores, the lack of centralized support, even within Apple&apos;s store where volume has overcome curation and search algorithms are poor. Look at how other companies curate apps on their own websites quite successfully or offer free downloads as part of a marketing scheme.</p>\n    <p>These are the factors you&apos;ll notice and that will paint a larger picture of what&apos;s happening in the space. Here are some things to look for:</p>\n    <ul>\n    <li>Is there a big problem that is plaguing the industry right now? How are others responding to it?</li>\n    <li>What are the newest products or tools currently available for the industry?</li>\n    <li>What is the biggest innovation of the last few years?</li>\n    <li>Who has been successful of late in this industry? Who has not?</li>\n    </ul>\n    <p>Don&apos;t worry about who is a competitor or not &#x2013; just focus on the industry as a whole and get a better sense of what&apos;s working, what&apos;s not, and what hasn&apos;t been done yet.</p>\n    <h3>The Ideal Customer</h3>\n    <p>Who is the person you want to sell your product to? Having at least a general idea of what the ideal customer looks like helps you make a lot of decisions &#x2013; the language of your interface and documentation, the way you present the product on your website and in app stores. This will all be affected by the person who most wants it.</p>\n    <p>There are a couple things to keep in mind here.</p>\n    <p>First, we can&apos;t target everyone, so don&apos;t try. You will make your product to solve a single problem, hopefully a big one. So let&apos;s look at who also has those problems and focus our energy there.</p>\n    <p>Here&apos;s how that will look:</p>\n    <ul>\n    <li>Map out 2-3 pain points &#x2013; big fat problems that your product might solve.</li>\n    <li>Look at who is most likely to have those problems. Create a list.</li>\n    <li>Confirm that these people are in your buyer groups through some cursory research.</li>\n    </ul>\n    <p>This entire process should take you no more than 15-20 minutes. Simply jot down the pain points you identified, brainstorm a few people you think would be best served by your solution and Google the results to see if your assumptions are confirmed.</p>\n    <p>If you find specific questions being asked in LinkedIn Groups, Facebook, Groups, on Quora, or in other industry forums, jackpot. You&apos;re set. If not, refine it a bit and try again. Aim to get 2-3 confirmations before moving on.</p>\n    <p>If you do this for more than 20 minutes and aren&apos;t finding anyone, consider whether this is really a good product idea. If there aren&apos;t questions or complaints floating around out there to match yours, it might not be as much of a slam dunk as you thought. Or maybe you&apos;re not describing it the same as your potential customers.</p>\n    <h3>Competition</h3>\n    <p>Guaranteed there are other companies out there doing something a lot like what you&apos;re doing. You aren&apos;t the first, nor will you be the last to tackle the problem your product is designed to solve.</p>\n    <p>This is not a big deal. In fact, it&apos;s a good thing. Competition means demand and demand means there&apos;s likely room for you to come in and build a business.</p>\n    <p>If there was no competition at all, you&apos;d probably be looking at a barren wasteland with few or no customers. Which would you prefer?</p>\n    <p>So competitors are good because they mean there&apos;s money out there to be earned. They also offer one other major benefit &#x2013; information. You can learn a LOT from competitors, from what they do right to what they do horribly wrong.</p>\n    <p>It&apos;s like watching someone else jump into the lake to see whether they get bitten by something. You&apos;re getting in when you know the water is safe.</p>\n    <p>You need to know three key things here &#x2013; who your biggest competitors are (the ones that may not even realize you exist), who the stealth competitors are who may not be on anyone&apos;s radar yet, and what they typically do when someone else enters that water.</p>\n    <h4>Pegging the Competition</h4>\n    <p>Always start at the top. Who are the biggest, best funded, and most powerful competitors on the market and why?</p>\n    <p>Step one here is to just jot a few names down. You probably already know a few from what little research has been done. Once you&apos;re done, though, take it at least one step further and look for the little guys who are trying to work their way up too. I always use Google for this. For example, if you were looking for a company that sold custom dress shirts, you could type in &quot;custom dress shirts&quot; but then you&apos;ll just find the big guys. Instead, search for much more specific terms like &quot;button down shirts made from scratch just for me&quot;. Wit this search, you&apos;ll get the little guys just getting started. Other tools you can use include the following sites:</p>\n    <ul>\n    <li>com</li>\n    <li>com</li>\n    <li>com</li>\n    <li>com</li>\n    </ul>\n    <p>These will give you a bit more data on which companies are competing with each other online and how they compare to one another. There was a time when digital presence didn&apos;t equate to company size. That time is long gone &#x2013; if someone has a big, powerful website, they are a big powerful company. Period.</p>\n    <p>Your goal here is to determine who the &quot;Coke&quot; of the industry is. Once you know who that company is, ask yourself a couple of questions:</p>\n    <ul>\n    <li>Do they innovate and introduce new solutions and products to the market?</li>\n    <li>Do they wait for others to innovate and then buy those companies to grow?</li>\n    <li>Is it somewhere in between the two with heavy investment in both R&amp;D and M&amp;A?</li>\n    <li>How does the public view this company? As a helping hand or a corporate goliath?</li>\n    </ul>\n    <p>These questions will have a lot to do with the warmth of the water when you jump in. A company that actively innovates and invests and is viewed positively by the public is harder to make a dent against than one that is content to sit back and wait for little guys like you to do all the hard work. Neither is bad, but it affects the type of situation you&apos;re stepping in to.</p>\n    <h4>Are There Any Stealth Competitors?</h4>\n    <p>The big guys are easy. They leave their prints on everything and are proud of it.</p>\n    <p>For these guys, look for the following:</p>\n    <ul>\n    <li><strong>Signs of Disruption</strong> &#x2013; Has anything changed dramatically? Is someone trying to upend what is considered &quot;normal&quot; in the industry in a way that changes or breaks the standard. 37 Signals&apos; low cost, feature-light tools are a prime example of a stealthy paradigm shift in the project management and CRM space. Basecamp and Highrise have millions of users now (and are name brands), but when they first hit the scene as upstarts with new ideas, the big guys didn&apos;t pay much notice.</li>\n    <li><strong>New Ideas and New Concepts</strong> &#x2013; Sometimes technology enables us to do something completely different than we&apos;ve ever done it before. This can create competitors in a space where they didn&apos;t exist before. It&apos;s how Apple can become a competitor to Barnes &amp; Noble. Or how Uber can upend a centuries old industry in major cities. Technology changes everything. Look for this in your field, or signs that it could be coming.</li>\n    <li><strong>Beginning Shifts in an Industry</strong> &#x2013; Industries change all the time often because of technology, but sometimes they&apos;re just getting started (or have yet to make a shift). Disruptions take time to catch on. Travel is a great example, though. The travel industry looks NOTHING like it did 20 years ago. Priceline, Kayak, TripAdvisor, and AirBnB are just some of the technologies that have upended how we travel. There will be more.</li>\n    </ul>\n    <p>Look for signals and shifts like these and note where the changes have occurred. There doesn&apos;t have to be a competitor out there actively changing the way something works either. It can be a weak point you notice &#x2013; something you think will change in the near future due to technological advances.</p>\n    <h4>How Does the Competition Respond?</h4>\n    <p>When you come in to the market, stomping around with your new technology asking people to give you money instead of those other guys, how will they respond? Every situation is different, but guaranteed there have been competitors in the past who did the same thing.</p>\n    <p>Look at what those past competitors did and how they did it, and then review what the response was.</p>\n    <p>Do the big guys just buy up anyone that gets in their way? Do they ignore them? Do they build to compete and squash them under their superior install-base and marketing budget? Or are they legitimately cool with competition in the space and help to foster it?</p>\n    <p>That last one is pretty unlikely, but you never know &#x2013; humanity can surprise you every now and then.</p>\n    <p>The truth is that most companies with any kind of success have their ears to the ground <em>constantly</em> and will take action if they see someone trying to carve a piece out of their market share.</p>\n    <p>Spend some time reviewing previous run ins with other competitors to see what will happen to you in the same situation. The last thing you want is your micro-startup with no budget and a brand new product being steamrolled by a big guy with a mega-budget and no qualms about ruining your business. This happened to me with stam.pr. I found my biggest competitor had a history of buying new little guys like me. So, to set things straight, after I started, I reached out to him and sure enough, he wanted to buy me out. I declined.</p>\n    <h2>What&apos;s Your One Liner?</h2>\n    <p>With the competition out of the way (or at least on your mind), it&apos;s time to think about how you&apos;ll talk about your company.</p>\n    <p>Seems like a small thing, but in the coming weeks and months you&apos;re going to be talking about your product and your burgeoning company a LOT. Every time someone ask what you&apos;re building or you attend a meetup, or you meet with a new contractor or even an investor &#x2013; you&apos;re going to use the same handful of sentences to describe what you do, why you do it, and how it&apos;s different.</p>\n    <p>So it had better be good.</p>\n    <p>There are two ways to answer this and I recommend you have an answer to both.</p>\n    <p>There&apos;s the elevator pitch &#x2013; which is a bit longer and goes into some detail what the product is designed for and who will care. A good elevator pitch paints a picture of why your product exists and how it differs from every other one out there. A bad one rambles on and leaves who you&apos;re talking to even more confused than before they asked.</p>\n    <p>Most elevator pitches are bad.</p>\n    <p>The second way to answer this is the one-liner. To me this is arguably more important. When someone asks what your product does, they don&apos;t want to hear a long description of the product&apos;s synergy with modern technologies, blah, blah, blah. They want to know <em>what it does</em>.</p>\n    <p>One line.</p>\n    <p>This is not easy, and it will take <em>many</em> iterations to get it right. But you&apos;ll eventually get it and when you do, you&apos;ll find that people are much more engaged when you explain your company.</p>\n    <p>Here&apos;s an example using the century&apos;s most successful consumer tech, the iPhone:</p>\n    <p>One liner: It&apos;s a computer you carry around in your pocket</p>\n    <p>Elevator: It&apos;s an Internet connected computer you carry in your pocket that let&apos;s you install apps from a private, curated software store.</p>\n    <p>And that&apos;s a short one &#x2013; a really short one.</p>\n    <p>Bottom line is that when time is short and clarity is vital you need to be able to boil down your product&apos;s purpose and functions into a single line.</p>\n    <p>I&apos;ve met and worked with a lot of startup founders in my life and this comes up a lot. One guy I know who recently received VC money for his company went through numerous elevator-style descriptions of his companies (or longer) and I still had no idea what he did. When I finally looked at his website, it was instantly clear to me what he did &#x2013; and it wasn&apos;t complicated.</p>\n    <p>Yes, the benefits of your product, the cool unique features, and the tweaks that only you can offer are important, but don&apos;t start there &#x2013; make sure they know what you do first, then get into the nitty gritty.</p>\n    <h2>Strategic Direction of Your Business</h2>\n    <p>Ever notice how a lot of startup founders drop out of business school? There&apos;s a good reason for that.</p>\n    <p>Instead of sitting in a classroom talking about the theory of starting a business for 2-4 years, these people want to DO it. Just like you.</p>\n    <p>That said, there is some good stuff buried in all the noise that can help you get a better sense of where you&apos;re headed and more importantly, why you&apos;re headed in that direction.</p>\n    <p>So I&apos;m going to boil down the business school stuff to the next couple of pages, point out what you need to know, skip over the rest, and you should have everything you need to get started launching your business.</p>\n    <h3>What&apos;s a SWOT?</h3>\n    <p>Business school textbooks are littered with acronyms that don&apos;t mean much. SWOT is one of those &#x2013; it&apos;s an incredibly stupid, suit &amp; tie name for a very useful concept. Here&apos;s what it stands for:</p>\n    <p>Strength</p>\n    <p>Weakness</p>\n    <p>Opportunity</p>\n    <p>Threat</p>\n    <p>And while I don&apos;t recommend you go to the trouble of actually completing one of these in the kind of detail that an MBA class would require, the concepts behind it can come in handy with the information you just gathered about your competitors.</p>\n    <p>The idea here is to know and be perfectly honest with yourself about where you stand against your competitors. This is an <em>extremely </em>difficult thing to do. Even the best of the best scientists are subject to wanting their hypothesis to be true, and at times being biased in their analysis. We all think we&apos;re awesome and want others to know just how awesome. So this can be tricky. It&apos;s why a lot of companies hire a consultant to come in and do this for them.</p>\n    <ul>\n    <li><strong>Strengths</strong> &#x2013; What do you have that other people don&apos;t have. What makes your perspective uniquely strong and how can it help you succeed? A lot of this is your agility as a startup and someone who is building from the ground up. You have no customers to please, just a cool product to make.</li>\n    <li><strong>Weaknesses</strong> &#x2013; At the same time, where are you weak. You&apos;re new. You&apos;re small. You&apos;re inexperienced (arguably strengths too but bear with me). And there may be others &#x2013; depends on who your competitors are and how aggressive they can be.</li>\n    <li><strong>Opportunities</strong> &#x2013; What kind of holes did you find in this space? Are there things your competitors aren&apos;t doing that you can? Technologies entering the space that everyone else is ignoring? A looming paradigm shift that you can jump in front of?</li>\n    <li><strong>Threats</strong> &#x2013; What&apos;s going to get in your way as you get started. Identify the threats in advance and you can prepare for them. Negativity from your friends and family. Competitor backlash. Lack of funds. Slow growth. We&apos;ve covered all of these &#x2013; make sure you keep them top of mind.</li>\n    </ul>\n    <p>Don&#x2019;t spend any more time on this until you have a stable product and paying customers. Consider coming back at various milestones to work on this and refine it as you build out your ideas. In the meantime, be wary that these things exist. Write them down and keep them in mind as you get started. More importantly, spend time watching what others do and when they make mistakes, be ready to pounce on them.</p>\n    <h2>The Business Model</h2>\n    <p>This is simple: make money. Your business model isn&apos;t about getting bought or acquiring funding or changing the world. It&apos;s about making money first and foremost because this way, when no one wants to buy you, you can still eat.</p>\n    <p>If you&apos;re not pulling in money, you&apos;re doing it wrong and should start over. And with this book, you should be on your way to doing that in just a few days. But don&apos;t get caught up in mapping out your profitability over time, or prepping financials, or in hunting down investors (we&apos;ll get to that).</p>\n    <p>Focus on one thing and one thing only, both to ensure you get something out of this and to make it as easy as possible on yourself &#x2013; make money.</p>\n    <h3>What&apos;s It Going to Cost?</h3>\n    <p>We spent a fair bit of time on this on the first day. You now know roughly what it costs to do pretty much anything that will be needed in building your product.</p>\n    <p>Development costs. Support. Software purchases. Maintenance. Testing. It&apos;s all outlined in that chapter, so go back and take a look frequently as you get started.</p>\n    <p>More importantly, keep an updated list somewhere.</p>\n    <p>You don&apos;t need a fancy spreadsheet that outlines what you&apos;ll be spending for months or even years in advance, but you should have a clear idea of what you&apos;ll be investing in the hear and now and what you hope to get back out of it.</p>\n    <p>If you don&apos;t know what it costs, how can you decide if it&apos;s profitable? And it needs to be profitable to keep going.</p>\n    <h3>The Marketing Plan</h3>\n    <p>Last point I want to touch on from the business school side of things before moving on to the next day &#x2013; marketing.</p>\n    <p>Here&apos;s what my quick and dirty startup marketing plan looks like:</p>\n    <p>Marketing is not yet about building your business. It&apos;s about learning what your product looks like, what your business is capable of, and whether your model is viable.</p>\n    <p>That said, there are some things you absolutely need to know &#x2013; if only so you can create a better product. Things like how your competition is acquiring users, what you can and should spend on marketing (if anything), how to price your product, and when to promote it (and how) once it&apos;s completed.</p>\n    <p>Again, I want to keep this short because the most important thing you can do is invest time and money into actually building an awesome product, but you&apos;ll now know how to get your first handful of users when you reach that point.</p>\n    <h3>What Is the Competition Doing?</h3>\n    <p>Fortunately, you&apos;ve pretty much already done this. You know what the competition is doing and whether it&apos;s working or not (more or less). Your own budget will be small (or non-existent), so this can help you pinpoint easy, quick wins when you start pushing your product out there.</p>\n    <p>Here are some things to look for:</p>\n    <ul>\n    <li>Where are they writing about or talking about their product?</li>\n    <li>How much money are they spending to promote their product? Is it working?</li>\n    <li>Are their multiple players in the space gunning for the same attention?</li>\n    <li>How much content is written about the problems and issues in this field?</li>\n    </ul>\n    <p>Are you going to come out of the gate doing all of the above? Probably not &#x2013; it&apos;s a waste of time this early, but by knowing what the competition is doing and finding any weak spots if they&apos;re out there, you&apos;ll have a few trump cards in your back pocket when the time comes to play them.</p>\n    <h3>When Will You Start Marketing and How?</h3>\n    <p>So if a marketing campaign is far in the future, what will you do now and how long will it be before you can start actively promoting your product?</p>\n    <p>Keep in mind that this is new&#x2026;very new. You haven&apos;t even built it yet and you don&apos;t know if it&apos;s going to be a success.</p>\n    <p>Why invest time and money promoting something that&apos;s yet to prove itself one way or another. Anything can be successful if you throw enough money at it. That&apos;s why we wait. We want to land on the product that can be successful and explode with an actively growing user base WITHOUT spending thousands on marketing. After that, it&apos;s the cherry on top &#x2013; you can accelerate growth, but only once you can accord to pay for that acceleration.</p>\n    <p>What I want you to know now is:</p>\n    <ol>\n    <li>Who you&apos;re selling it to</li>\n    <li>Why they want it</li>\n    <li>What you can do easily when the time comes</li>\n    </ol>\n    <p>With those things in mind, the product will be better and have a stronger chance of reaching the point at which marketing makes sense. Right now, we&apos;re not there yet.</p>\n    <h3>Positioning, Branding, and Product Strategy</h3>\n    <p>With the little bit of research you have done, you now know a fair amount about the competition, what works and what doesn&apos;t, who&apos;s buying, and what other people are spending money on to promote in this space.</p>\n    <p>So you can start mapping out, at least in the ridiculously early, on a napkin stages what your position in this space will be, how you will brand your product, and what the pricing and distribution will look like.</p>\n    <p>Hint: right now, it doesn&apos;t really matter. If your product does something really well, that&apos;s your brand and your positioning and your strategy rolled up in one. You sell on that differentiator and if it doesn&apos;t sell, you have your answer, but there are some things keep in the back of your mind for the steps after that:</p>\n    <ul>\n    <li><strong>Name of the Product</strong> &#x2013; Don&apos;t waste time on this yet. Just keep it in mind &#x2013; whatever you name it, it should be memorable and reflect what the product does.</li>\n    <li><strong>Company Brand vs. Product Brand &#x2013;</strong> Is your product your company or do you want to make more of these things? Think about it now and start separating the two if necessary.</li>\n    <li><strong>Distribution and Pricing</strong> &#x2013; You already know where your product will be distributed (native app store or web app). You also know roughly what it will cost based on competitor pricing. Write it down and start planning around those things. It will affect a lot of stuff down the line.</li>\n    <li><strong>Launch</strong> &#x2013; There will be no formal launch and very minimal pre-launch. Your goal is to get something done and get it up so people can start using it. If it works, it&apos;s worth launching &#x2013; in fact, we&apos;ll spend the entirety of the last section of this book on the launch and feedback cycles. Don&apos;t worry about it from a marketing perspective.</li>\n    </ul>\n    <p>As you can see, marketing is an afterthought at this point. Is it important? Eventually yes. Right now, barely. There&apos;s some cool stuff out there, and it can help drive user growth, but it&apos;s such a time sink and this early on, time is at a premium. Awesome product first, promotion of said product later.</p>\n    <h2>Bringing Everything Together</h2>\n    <p>There you have it &#x2013; we just boiled down several books&apos; worth of MBA-level worry into 15 pages.</p>\n    <p>It&apos;s not that this stuff isn&apos;t important. If your business takes off someday and you need to grow, hire people, promote products, and manage the scaling of your business you&apos;ll need to know a heck of a lot more, but right now that stuff is far in the future.</p>\n    <p>Right now your primary concern is building an amazing product and what we&apos;ve covered in the last few pages will help you get there. A business plan, big time funding, and expensive marketing efforts won&apos;t.</p>\n    <p>It&apos;s all good stuff to keep in mind, though, so don&apos;t forget that it&apos;s out there. If all goes well, you&apos;ll need to start thinking about these things sooner or later and knowing what you don&apos;t yet know is just as important as the knowledge itself. But give it some time. You have a ways to go yet.</p>\n  </section>\n</article>\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter3"
            ],
            [
              "chapter:number",
              "3"
            ],
            [
              "chapter:day",
              "Tuesday"
            ],
            [
              "chapter:title",
              "Research & Refine"
            ],
            [
              "chapter:short_title",
              "Research"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/04-wednesday-founding/toc.html": {
    "revision": 1503356398000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/04-wednesday-founding/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Founding &amp; Funding</h1>\n    <p>You&apos;re founding a startup!</p>\n    <p>I imagine that&apos;s a thought you&apos;ve had at least a couple times at this point.</p>\n    <p>It <em>is</em> very cool &#x2013; I won&apos;t argue with you &#x2013; but it&apos;s not the glamorous, two-steps-from-riches, lifestyle you&apos;re imagining. It&apos;s a lot of freaking work. It&apos;s hard. It&apos;s time consuming. You might fail.</p>\n    <p>I don&apos;t say this to discourage you. Rather, I want you to remember that you&apos;ve taken on a role in a business, not a cable TV drama about Silicon Valley. Today I want to look at some of the myths, some of the preconceptions, and some of the assumptions about founding a startup and put a few things into perspective.</p>\n    <p>We&apos;re going to look at not only the role of founders, who they are, and how to start breaking out responsibilities for yourself (and anyone who is onboard with you at this point), but your options when you need money for your business.</p>\n    <p><br> This is the part that gets the most press coverage and the big headlines &#x2013; the big infusions of cash and the bigger personalities that get those infusions &#x2013; but it&apos;s only a small part of the reality of owning a startup.</p>\n    <p>And today I want to share what this particular piece of that reality looks like, what you can expect, what you SHOULDN&apos;T expect, and how to go to the next stage with your business without getting in over your head.</p>\n    <h2>Your Role in the Company</h2>\n    <p>As a founder, you&apos;re more than just a figurehead. You&apos;re the person doing just about everything that needs to be done until you can afford to hire people.</p>\n    <p>Answering phones. Testing for bugs. Answering complaint emails. Copying and pasting spreadsheets. Yup, that&apos;s all you.</p>\n    <p>But you&apos;re also the guy who gets to make the big decisions. Where will the funding come from? When will you bring other people on board to help you? Will they be employees or cofounders? What&apos;s the lifespan of your project?</p>\n    <p>This is all stuff you need to be responsible for as the person at the top of the food chain for your new business. We&apos;re going to run through the deeper role of the founders, the support you can expect (and not expect) as you get started, the funding sources you may or may not have at your disposal, and ultimately which decisions make the most sense for you and your brand new business.</p>\n    <p>No pressure &#x2013; this is just the biggest set of decisions you&apos;ll make for your business.</p>\n    <h2>Founders</h2>\n    <p>To keep it as simple as possible, a founder is the person who starts the company with their own sweat, blood, tears, and/or cash. If you&apos;re investing in the business and getting it off the ground, congratulations, you&apos;re a startup founder.</p>\n    <p>With that out of the way, there are a lot of nuances to this role. Sole founders, cofounders, and people who work in the business vs on the business. It&apos;s all stuff you have to think about because it&apos;s going to determine how you approach building your business in the long term.</p>\n    <h3>What Is a Founder?</h3>\n    <p>There is no &quot;perfect&quot; founder. Some of them are technical geniuses who literally build the product that they eventually launch and turn into a technology behemoth. Others are tinkerers who like to program and happen to create something that others are willing to pay for. Others still are career business people or sales people and do it strictly for the money &#x2013; hiring people to do all the heavy lifting of actually building a product.</p>\n    <p>In the end, it doesn&apos;t matter which of these you happen to be &#x2013; the business will grow and be structured differently depending on your skillset, but in the end, the same things are going to matter when it comes to creating a successful product.</p>\n    <p>I get this question a lot &#x2013; what are the right skills for a startup founder? Honestly, it doesn&apos;t particularly matter, at least not when it comes to hard skills.</p>\n    <p>Programming, design, sales, marketing &#x2013; doesn&apos;t matter what you know how to do. You can always hire people to help with the rest.</p>\n    <p>What really matters are the soft skill and the drive to get stuff done.</p>\n    <p>Sergey Brin and Larry Page were grad students at Stanford &#x2013; scientists and programmers who happened to create one of the world&apos;s richest companies.</p>\n    <p>You&apos;ll find that a lot &#x2013; a company founded by someone who excelled in one particular area and who then brought in someone to help with everything else. Most of these companies have a single face &#x2013; the guy who is more comfortable on camera &#x2013; but they have multiple founders who pour energy into creating the product and getting it out there.</p>\n    <p>A common dynamic that works very well is to have both a technical and non-technical founder. Someone can handle the development and building the product without having to spend to hire an outside talent, and the other can handle everything else &#x2013; this is more of your typical MBA-style business manager.</p>\n    <p>Regardless of the skill combinations, however, what you need to do is work hard, not give up (until the market tells you your product won&apos;t work), and find the most efficient, least expensive way to solve a problem as quickly as possible.</p>\n    <p>Do these things, regardless of what your own background is, and you&apos;ll have just as good an opportunity to find success in your work as anyone else in this business.</p>\n    <h3>Your Role in the Business</h3>\n    <p>Your role in the business will change constantly. From the start, you&apos;ll do a little bit of everything. But over time the nature of your role might adjust as you determine you aren&apos;t very good at certain things (or as you find people who are better at those things than you are).</p>\n    <p>At the core, though, there are a few things you should always be doing.</p>\n    <ol>\n    <li><strong>Representing the Company</strong> &#x2013; Don&apos;t send someone else out to apologize for your failures or make your deals. Be willing and able to go out and push when opportunities for success present themselves. This might change if you get big, but for now, it&apos;s all you.</li>\n    <li><strong>Leading the Team</strong> &#x2013; Even if it&apos;s just you in your basement with the cat, you have a team and you need to lead. That means making tough decisions (quickly) and being ready and willing to make moves as soon as necessary. No one else is going to do it for you.</li>\n    <li><strong>Recognize Your Failings</strong> &#x2013; You&apos;re not perfect. Be aware of where you don&apos;t kick ass and be willing to fill those gaps. Find people who do kick ass there and that can help you.</li>\n    </ol>\n    <p>This is the key to being a successful founder &#x2013; knowing your failings, working hard despite them, and bringing in smart people as soon as possible to help you realize your dream.</p>\n    <h3>Who a Founder Should Be</h3>\n    <p>At the end of the day, regardless of your skillset, you are your company&apos;s brand. How many CEO&apos;s and Presidents in old school businesses do you know the name of? How many startup founders do you know?</p>\n    <p><br> When a business is pulled together by a single person and small cadre of brilliant people in a short time period, that person tends to become the brand of the company being developed.</p>\n    <p>Elon Musk (PayPal). Brian Chesky (AirBnB). Drew Houston (Dropbox). Daniel Ek (Spotify). Tim Westergren (Pandora).</p>\n    <p>These people are more than the companies they own. They are brands. And you will be as well if your company succeeds. Even in the early stages, you need to be out there, putting your face forward and willingly stepping in front of any attention you receive &#x2013; good, bad, or indifferent.</p>\n    <p>A new company, especially a small one with a single product, cannot succeed if there&apos;s no face attached to it. You need to be out there taking action and building your business. If you aren&apos;t comfortable doing that, it may be time to bring in a cofounder who can.</p>\n    <h3>Why Have Others Help You?</h3>\n    <p>I&apos;ve mention cofounders a few times. At this point you may or may not have someone on your side to help get this thing off the ground.</p>\n    <p>If you do, awesome &#x2013; I&apos;m about to show you why they are a good person to have on your team. If you don&apos;t, read carefully &#x2013; there are a lot of benefits to having two or more people on board and a handful of cons. Make your decision wisely and don&apos;t let the money that doesn&apos;t yet exist be a deciding factor.</p>\n    <h4>Strength in Numbers</h4>\n    <p>Whether you enjoy the company of others or not, there are significant benefits to having more than one person working on a project.</p>\n    <p>After all, you&apos;re <em>one</em> person. How much do you think you can do? Especially if you&apos;re still in school or working a full time job? It&apos;s unrealistic and if you stretch yourself to breaking you&apos;ll either fail or meltdown. And if you break, no one is left to pick up the pieces.</p>\n    <p>So it&apos;s good to have someone else or multiple someones on board to help you get your idea off the ground. Here are some of the most substantial benefits of this approach:</p>\n    <ul>\n    <li><strong>Failing Alone Isn&apos;t Fun</strong> &#x2013; If you&apos;re committed to the idea of failure, that your idea might crash and burn and that you&apos;re willing to walk away without a second thought relatively early in the process, it&apos;s a lot easier to do so with someone else on board &#x2013; at least one other person who is equally invested and can look and agree with you that this is the right decision. Failure is a lot harder to accept when it&apos;s just you.</li>\n    <li><strong>Pressure to Succeed</strong> &#x2013; At the same time, two people will push each other to try harder and be more successful. The hard times that are inevitable when starting a new company will be easier to push through when you know someone else relies on you just as much as you rely on them.</li>\n    <li><strong>Time Off</strong> &#x2013; Want to take time off? Good luck if you&apos;re flying solo. Most founders work every day of the week for months or even years. Now imagine if you&apos;re the only one &#x2013; the one guy whose effort will determine the success or failure of your business. It will not be easy to disconnect for even a couple of days if you know you&apos;re the only one people can talk to.</li>\n    <li><strong>Skill Match</strong> &#x2013; This is where your shortcomings can be balanced out. Maybe you&apos;re a kickass programmer but you suck at sales and all that marketing junk. A cofounder who is awesome at talking to people, enjoys getting on the phone, and actively digs into selling your product would be a perfect fit. Do you necessarily need someone to do that? Not right away, but if the fit is good, it can work out really well. Hubspot&apos;s founders fit this bill &#x2013; one the career salesperson and the other a reclusive techy.</li>\n    <li><strong>It Just Plain Works Better</strong> &#x2013; Data supports there being a second founder. Of all successful startups in 2010, 47.5% had two founders and only 20% had 1. The vast majority of successful companies had exactly two founders. Not too many cooks in the kitchen, but support between two people to get a project off the ground.</li>\n    </ul>\n    <p>Having at least one other person on board helps startups succeed and keeps founders from losing their marbles in the process. There are plenty of reasons you might still not want to go that route, but keep this stuff in mind because you can&apos;t take it back months or years from now.</p>\n    <h3>Funding Benefits</h3>\n    <p>There&apos;s one more very important benefit for a startup when it comes to having two versus one founder:</p>\n    <p>You&apos;re a lot more likely to get funding for that startup.</p>\n    <p>Part of the reason the number of successful one person startups is so low is that they have a heck of a time finding funding, and not a lot of people are setup for self-funding.</p>\n    <p>Statistically you&apos;re much more likely to get funding from any of the sources we&apos;re going to talk about with two or more people. It&apos;s just good economics &#x2013; giving a lump sum of cash to one person for their cool idea is riskier than giving it to a collective of people who believe in what they are doing.</p>\n    <p>Not only does the financial burden fall on more people in the latter situation; there are better indicators of success from past startups.</p>\n    <p>Imagine you have a big pool of money to invest in startups. Would you trust a company that only has one person and can&apos;t get anyone else on board? Even if that person very consciously decided not to bring on cofounders, it&apos;s a risky investment.</p>\n    <p>Does this matter if you plan to self fund or forgo outside funding altogether? Not one bit, but it&apos;s something to consider if you ever plan on asking someone for cash.</p>\n    <h3>What Should Your Team Look Like?</h3>\n    <p>Recruiting cofounders isn&apos;t the best idea. These things tend to happen naturally &#x2013; two existing colleagues or friends with compatible skills get together to create a product for a problem they both see as solvable.</p>\n    <p>But at the same time, there may be a group of people you regularly work with and the issue becomes who do you share the idea with or who do you approach with it and &quot;recruit&quot; to join your team. They&apos;re not a perfect stranger, but nor are they your best friend with whom you&apos;ve done everything for years of your life.</p>\n    <p>Here are three things to consider when you reach this point:</p>\n    <ol>\n    <li><strong>What Resources Do You Have?</strong> &#x2013; Is there anything you are missing from your skillset, financial resources, access to tools or equipment, or otherwise that someone could bring to the table? This is a good place to start, though, don&apos;t make the mistake of bringing someone on board strictly because they have cool stuff you can use &#x2013; this is someone you will be building a business with, keep that in mind.</li>\n    <li><strong>Is There a Likely Candidate Already?</strong> &#x2013; Is there someone you have worked with in the past or who you know would be interested in what you are putting together? These things tend to happen organically; it&apos;s more a matter of inviting those you already work with into your circle and not pushing them away as a means of getting them on board.</li>\n    <li><strong>Do You Want a Partner?</strong> &#x2013; Don&apos;t assume at this point that you NEED a partner. Yes, there are several benefits that you gain from having a larger team with several people on it, but there are also several downsides. Differing visions. Splitting the profits. Fighting over direction. For as many startups succeed with multiple people, more fall apart because of the natural clash that occurs between any two intelligent, driven people.</li>\n    </ol>\n    <p>At the end, the choice of whether to bring on a cofounder (or two) is up to you. It&apos;s your idea. Your company. Your future. You do what you think will work best for you. But don&apos;t dismiss it strictly for monetary reasons and don&apos;t make the decision strictly because others do as well. Do what&apos;s best for you.</p>\n    <h2>Funding</h2>\n    <p>Every company needs two things to get off the ground &#x2013; people and money.</p>\n    <p>We&apos;ve covered the first half so now it&apos;s time to talk funding. Where is the money going to come from to get your product built, your website online, and your first few users signed up?</p>\n    <p>That money &#x2013; and there will be a good amount of it you&apos;ll need to get started &#x2013; needs to come from somewhere.</p>\n    <p>But the amount of money you need is often severely overestimated. And the glamor and excitement of multi-series funding can blind a new startup founder from the fact that all that funding has just as big of a downside as it does upside.</p>\n    <p>For the majority of this book we&apos;ve discussed self funding &#x2013; pulling from personal resources to get your project off the ground.</p>\n    <p>It makes the most sense at this scale. Why take money from someone that will have huge expectations for how you use it and what they get out of it, when you could do it yourself and retain 100% ownership of your business?</p>\n    <p>But that&apos;s not always an option. Especially if you&apos;re not a programmer and will need to hire someone to handle the heavy lifting of building your project, you&apos;re looking at expenses of several thousand dollars.</p>\n    <p>Most people don&apos;t have that much cash just lying around. It has to come from somewhere.</p>\n    <p>As a startup, there are plenty of places to draw from &#x2013; Angel Investors, Venture Capital, Crowdfunding, or a good old fashioned loan. But realistically, there are fewer options than these &#x2013; if only because so few companies actually get VC funding or straight small business loans for their startup idea.</p>\n    <p>Let&apos;s take a closer look at each, what they entail, how they work, and whether they would be a good fit for your company.</p>\n    <h3>Self Funding and Angel Investors</h3>\n    <p>Self funding or bootstrapping is hard. It&apos;s slow going, it requires incredible flexibility and creativity and it frequently doesn&apos;t work.</p>\n    <p><br> But it also gives you so much freedom &#x2013; freedom you don&apos;t get when you have a big wad of someone else&apos;s money in your pocket. So there are big upsides and big downsides here. You can do what you want, but you have no cash in hand to do the big new stuff you really want to try, and more often than not you need to work your fingers to the bone because you&apos;ll be the only employee for a long time.</p>\n    <p>On the plus side of all this, when it works, the product tends to be really freaking good. It has to be. You don&apos;t have the time to roll out a crappy product. It HAS TO be good and you have to be creative to get it into the hands of the people who will like it.</p>\n    <p>There&apos;s no money for all that marketing junk that bigger companies throw around. You can&apos;t spend $20,000 a month on Facebook Ads or roll out testing with people around the world through paid free trials. It&apos;s not going to happen.</p>\n    <p>But without those resources, you&apos;re forced to be more frugal. You can&apos;t afford offices in San Francisco or brand new iMacs for the team, so you don&apos;t do it. Everyone uses their own crappy laptop. Everyone works out of a garage or a loft or their own apartments.</p>\n    <p>That kind of financial constraint can drive innovation and force you to do more with less. It removes distractions and requires you to develop <em>new</em> processes to solve problems.</p>\n    <p>You have to make a really good product and build word of mouth to that product. Simple as that.</p>\n    <p>And when it works, it works really well. Github, Grasshopper, WooThemes, AppSumo &#x2013; they&apos;re all bootstrapped, self-funded startups and they had to cut a ton of corners to get where they are today, but the result was enhanced creativity and products that evolved and grew with time to match the needs of their current customer base &#x2013; the ones they couldn&apos;t afford to lose.</p>\n    <p>There&apos;s a freedom here too.</p>\n    <p>When you don&apos;t owe someone money, you can walk away whenever you want. It only affects you (until you start hiring) and while you might have a bunch of cash out of pocket on the line, it&apos;s still <em>your </em>cash. No one is going to investigate or dig through your resources if you decide to shutter up. You&apos;re the only who cares so you get the final say.</p>\n    <p>But it&apos;s also a double edged sword. You have that freedom. You are forced to innovate without resources. And yet, without those resources, you may sometimes come up just short of what you need to be successful.</p>\n    <p>Part of the process here is knowing when you need to ask for help &#x2013; when you need to take it to the next level and bring in outside resources that will help you create what you&apos;ve envisioned.</p>\n    <h4>Angel Investors</h4>\n    <p>Supplementary to this are angel investors. This is outside money, but it&apos;s not like Venture Capital, because it comes from a single investor.</p>\n    <p>Most Angel Investors are wealthy people who like cool ideas and will invest in those ideas if they think they are worth backing. The terms are often friendlier, the fear of failure lower, and the interaction is more one-on-one. Your mom could be an angel investor.</p>\n    <p>That&apos;s not to say that every Angel Investor is going to write you a blank check to do whatever you want with. But the strict, sometimes business gutting terms that come from VC firms don&apos;t tend to be included in Angel contracts. They&apos;re a lot friendlier and subject to your situation. You may know a wealthy family friend or neighbor willing to invest that other startups wouldn&apos;t have access to. It&apos;s a case by case situation.</p>\n    <h3>Venture Capital</h3>\n    <p>Too many startup founders treat venture capital like the golden goose &#x2013; an elusive treasure that will solve all their problems.</p>\n    <p>Unfortunately, that&apos;s not quite what you&apos;re getting.</p>\n    <p>First, Venture Capitalists only back about 5,000 projects a year on average. If that sounds like a lot, keep in mind that between 4-6 million new businesses are started every year.</p>\n    <p>The money goes to a select few, and you may not even want it.</p>\n    <p>Because of the extremely limited supply and heavy demand, seeking VC funding becomes a full-time job. This is about as big of a roll of the dice as there can be. You&apos;ll be investing 40+ hours a week to make this happen, with ZERO promise of return. Combine that with an existing day job and prepare for a long, arduous process that may not pay off. On top of everything, you&apos;re taking time away from the product and growing your business &#x2013; all at a critical time in the business lifecycle. This is the last time to step aside and focus only on the cash.</p>\n    <p>Funding typically happens over the course of several rounds. During each round of funding, the venture capitalist firm you&apos;re working with will offer a certain amount of money based on what they see the value of your company. You in turn &quot;give them&quot; a percentage of that company.</p>\n    <p>So they give you cash. You give them a part of your soul. Tough trade.</p>\n    <p>Just how much of the company do the VCs end up with after these funding rounds?</p>\n    <p>Most startups will never get Venture Capital, and practically none will get a second or third round, but on average you&apos;re looking at giving up between 20-40% during that first round of funding. You could own as little as 20% of your own company by the time the third round happens (and again, it&apos;s VERY unlikely you reach a third round unless you are crazy successful).</p>\n    <p>Keep in mind too that even if you get 20% of a really big company, the chunk you own is likely to be non-preferential stock. On exit when a sale or IPO happens, the VC firm will get their share before you.</p>\n    <p>Which means&#x2026;after a decade of your life is poured into this company, you could end up walking away with little or nothing.</p>\n    <p>Now, most will say something to the effect of &#x2013; 60% of something is better than 100% of nothing &#x2013; and I for the most part agree.</p>\n    <p>The problem isn&apos;t that the VCs own part of your company (though I would say that this is in fact a problem to some degree), it&apos;s that VCs are the most corporate backers out there.</p>\n    <p><br> These people do this for pure profit and they don&apos;t care about how you do or what the future of your business holds. They&apos;re playing a numbers game &#x2013; assuming one out of every X startups will actually succeed.</p>\n    <p>So they fight for the best possible terms in every transaction. They will pick and peel and pull at you until they get those terms and you&apos;ll be left with a fraction of the company you started.</p>\n    <p>And once these companies get their hooks in you, their goal is to see you profitable, and burn through your cash so you have no choice but to seek more. Mandatory consultants, deals brokered with other portfolio companies, highly &quot;recommended&quot; hires that cost you a small fortune &#x2013; these are only some of the &quot;perks&quot; to which you can look forward.</p>\n    <p>Remember, this company isn&apos;t only yours once you bring in outside investors. The cost of doing that will haunt you, especially if your project is successful.</p>\n    <p>Can VC work?</p>\n    <p>Yes, and it has for quite a few companies &#x2013; many of them just stumbling around with a new idea when they go to them for money the first time. It&apos;s not impossible to make it work, but it&apos;s painful and it&apos;s almost never the best option.</p>\n    <p>If you really want to do it &#x2013; and if you feel this is the best way to grow your business and get the capital needed to create growth, do it right.</p>\n    <p>Get a business advisor. Get a lawyer. Get an accountant. Invest money up front and make sure there are professionals poring over every piece of paperwork before and after you. Make sure you don&apos;t sign anything until you know for certain what it will mean for you.</p>\n    <p>Do this because it&apos;s the only way to ensure you don&apos;t get taken advantage of in this process. Don&apos;t be afraid this will scare people away&#x2026;because if it does, they&apos;re only trying to swindle you.</p>\n    <p>Also, talk to more than one investor. Don&apos;t let a single person woo you with flashy dollar signs and big project scope that will evaporate as soon as you sign. Make sure you have professionals on your side who can at least tell you what you&apos;re in for and compare the different options available from investors. If one investor is willing to look at your company, it&apos;s likely that others will be as well.</p>\n    <p>The last thing you want is to work with only one investor who can then run the table with you and get whatever they want from the deal.</p>\n    <p>Doesn&apos;t sound like much fun, does it?</p>\n    <p>That&apos;s because it&apos;s not. The bottom line is that VC sucks and if you have a choice (which you do), you shouldn&apos;t pursue it.</p>\n    <p>Can it work? Yes. It has worked and will continue to work for a lot of businesses, but it&apos;s a longshot bet on top of what is already a longshot in starting a new business.</p>\n    <p>The headache, extra paperwork, and potential downsides of taking that money will come back to haunt you. Success or not, your company will suffer because of it.</p>\n    <h3>JOBS Act and Crowdfunding</h3>\n    <p>The JOBS Act was passed in 2012 and contains 7 titles that are designed to help small businesses get more capital.</p>\n    <p>There is a bunch of stuff in the law, most of which has little or no impact on you and your business, but there are two titles in particular that can affect you.</p>\n    <p>Title II &#x2013; Access to Capital for Job Creators</p>\n    <p>Title III &#x2013; Crowdfunding</p>\n    <p>Specifically, I want to talk about Title III (because most agree that Title II just makes a mess of the process and few if any companies will realistically try to use it).</p>\n    <p>What Title III does is essentially create a public market for private companies. This gives anyone the ability (not just corporate investors) to put money into small companies &#x2013; crowdfunding at its most fundamental.</p>\n    <p>Right now, in order to invest in exchange for stock in a company you must earn at least $200/year or have $1m in the bank.</p>\n    <p>Right now, &quot;crowd&quot; funding happens with a very small crowd of very wealthy individuals. The new law will make it possible to open up to a large group of less wealthy people who want to engage in this kind of investment.</p>\n    <p>The problem of course is that like any freshly minted law with too many hands on it in the development process, nothing about this is easy.</p>\n    <p>There are several hoops investors and companies alike need to jump through to make these investments &#x2013; even without the preliminary investor requirements. Like most new laws, this one is designed to protect investors, probably too much.</p>\n    <p>So is it a good way to raise capital for your business?</p>\n    <p>Not yet. The idea behind this is great, but execution is questionable and is going to cause you more headaches that it&apos;s worth with the other options that are already out there.</p>\n    <p>The bottom line is this. The JOBS Act, once in full swing, will offer a crowdfunding-for-startups style platform that will allow startups to acquire capital from investors on a much broader basis. Instead of a small number of large cash infusions, you&apos;ll be looking at hundreds or even thousands of investors at much smaller amounts.</p>\n    <p>A site like Kickstarter (possibly Kickstarter) will be needed to facilitate this exchange, but once they do, it will become possible to grow much faster. But just like with Kickstarter, most projects won&apos;t get funded. You need the network, marketing platform, and resources to go out and make a name for yourself enough to drive that kind of traffic to your project.</p>\n    <p>It will only really help you if you are already popular and have the opportunity to capitalize on that popularity to raise money. There&apos;s a very small niche of companies that have a large, loyal following and no existing investors or capital to draw from.</p>\n    <p>If you happen to land in that magic buffer zone, then by all means, dig into the JOBS Crowdfunding option, but if you&apos;re among the millions of others who don&apos;t fit the bill, this one is just too much work. You&apos;ll probably spend more money than you&apos;ll make just getting this setup.</p>\n    <h3>Getting a Loan</h3>\n    <p>There&apos;s a good reason why this is last on the list.</p>\n    <p>Yes, there are a number of systems out there in place to help small businesses get capital &#x2013; often with federal backing. But those systems are almost always setup to help brick and mortar or more traditional businesses.</p>\n    <p>Heck, that&apos;s why the JOBS Act was passed &#x2013; to create capital opportunities for smart young people like you.</p>\n    <p>A traditional business loan requires a number of things. You need collateral. You need a business plan. You need financials. You need an idea of how you&apos;re going to return not only the money you borrowed, but generate the profit you project to the bank or lender when you get that loan.</p>\n    <p>It&apos;s not easy to put all that documentation together, and it&apos;s a lot harder when your product is intangible &#x2013; a piece of software or a digital service that doesn&apos;t yet exist or is in the early prototype stages. As someone young and inexperienced, with little or not collateral, you&apos;ll have a hell of a time convincing any bank or lender to give you a lump sum of money to build your product, especially because these loans tend to have minimums needed to get started.</p>\n    <p>With all that said, there are some situations in which loans can work, especially with the advent of microloans for small businesses.</p>\n    <p>Your product shouldn&apos;t need a lot of money to get off the ground. You only need a few thousand dollars for a working first version and that&#x2019;s where freshly minted startups have managed to pull loan money in the past &#x2013; from micro lenders like Accion or PayPal that offer loans below $20,000 (the average is around $12,000) for the basic startup costs of a business for which you feel very strongly.</p>\n    <p>Are the terms great? Not particularly &#x2013; you&apos;ll probably be looking at 11% or higher in interest, but if you&apos;ve already tapped your friends, family, and anyone else you know and you can&apos;t put it on a credit card, micro loans are an option at this stage to get the capital needed to get your idea off the ground.</p>\n    <p>Keep in mind that if you take a loan, you have to pay it back. A venture capitalist, while bent on making the most money possible from your company and therefore heavily involved in ways you probably won&apos;t like, is still an investor and if your company tanks, they are out of luck.</p>\n    <p>The same cannot be said for the bank. Your personal credit (or that of your parents or other family if someone cosigns) will be up against that loan. That&apos;s why it&apos;s so hard to get a big one.</p>\n    <p>No matter how good of an idea it is, you don&apos;t want to bet your future on it. Bankruptcy is a life-changing thing &#x2013; keep in mind that neither student loans or mortgages go away in bankruptcy and if your project leads you down that path, you&apos;ll be in for a rough few years.</p>\n    <p>If you&apos;re really intent on getting a loan for startup costs, it&apos;s possible at smaller amounts with higher rates &#x2013; just be ready for the personal responsibility it will involve.</p>\n    <h3>Funding Your Business</h3>\n    <p>You have a young business in need of capital and there are a LOT of ways to get it. But the noise can be deafening. How do you know which of these methods is best for you?</p>\n    <p>Most of them suck &#x2013; you lose control, time, or money&#x2026;sometimes all three. How do you get the capital you need to grow your business and build a new product that will help you really get your name out there without going into bankruptcy right off the bat?</p>\n    <p>It will depend a lot on your situation and the nature of your business and your capital needs.</p>\n    <p>Ultimately, funding will be an obstacle you come back to time and again. The less you spend though and the more you do yourself, the better you&apos;ll be able to manage spending and get these things done without dumping a fortune into your company or giving away half the company to get off the ground.</p>\n    <p>The <a href=\"http://htmlcheatsheet.com/\" target=\"_blank\" rel=\"nofollow\">HTML CheatSheet</a> has its built-in editor where you can preview the document you are working on.</p>\n  </section>\n</article>\n\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter4"
            ],
            [
              "chapter:number",
              "4"
            ],
            [
              "chapter:day",
              "Wednesday"
            ],
            [
              "chapter:title",
              "Founding & Funding"
            ],
            [
              "chapter:short_title",
              "Founding"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/05-thursday-design/toc.html": {
    "revision": 1503356401000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/05-thursday-design/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Design &amp; Test</h1>\n    <p>It&apos;s time to start building. You have an idea. You have a plan. Now you need a product.</p>\n    <p>But there&apos;s one more step before diving in and coding (or having someone else get started). Right now, it&apos;s time to start building a design &#x2013; creating a layout of what this is going to look like and how you&apos;re going to make it a reality.</p>\n    <p><br> This is the dry run that will save you an IMMENSE amount of time if done properly. And the best part? All you need is a pencil and a piece of paper.</p>\n    <h2>Pencil Sketches</h2>\n    <p>A pencil sketch is exactly as it sounds. It&apos;s a drawing of what your app will look like. A hand drawn wireframe of the app from start to finish with multiple screens and the ability to &quot;test&quot; functionality in an extremely low risk, zero cost environment.</p>\n    <p>Basically, it&apos;s a way of working out the kinks before you get anywhere near a keyboard &#x2013; this process can save you THOUSANDS of dollars. It&apos;s that important.</p>\n    <p>And if you think it&apos;s just first time startup founders out there drawing on napkins, consider the number of famous startups that began as a sketch on a piece of paper.</p>\n    <p>This gave the founders of those companies time and opportunity to review what works and what doesn&#x2019;t in a format that doesn&#x2019;t cost them a penny.</p>\n    <p>You&apos;re going to do the exact same thing.</p>\n    <p>Another reason I love the idea of a pencil sketch is that it can be reworked fast. You can erase what you don&apos;t like or just rip it up and start over again if it really doesn&apos;t get the job done.</p>\n    <p>It&apos;s also an extremely effective way to avoid feature creep early on. When you see just how many more &quot;screens&quot; you have to draw out when you think of a new feature, you start to understand how much more development will be required to make your ideas a reality. It&apos;s costly and time consuming.</p>\n    <p>And all of it is free, so yeah, you have no excuse not to do this.</p>\n    <h3>Sketching Out Your Idea</h3>\n    <p>This is as simple as it sounds. You will quite literally be sketching out your idea. What will your app look like and how will it operate?</p>\n    <p>Don&apos;t worry about how to turn what you&apos;re drawing into a reality. Don&apos;t worry about the cost of the development process. Don&apos;t worry about the time it will take to build something. Just draw what you see in your mind.</p>\n    <p>This is the free writing of business development &#x2013; it allows you to make changes faster and more hands-on than you could on a computer screen. There&apos;s something immensely satisfying about having these things in your hands and manipulating them without a keyboard or mouse in the way.</p>\n    <p>And as you get started, don&apos;t be afraid of messing up. In fact, I highly encourage you to mess around and try to mess up. Make mistakes. Take stupid risks and see what happens. Add big features to see just how badly it breaks the app.</p>\n    <p>Only by seeing how big of a pain in the ass these mistakes would be will you be able to learn from them and start creating effective drawings that will eventually translate into your finished prototype.</p>\n    <p>The bottom line? You&apos;re not going to get it right the first time.</p>\n    <p>There is no wrong answer &#x2013; there are a lot of bad ones (adding features for example), but nothing you can&apos;t or shouldn&apos;t try to do in this setting. Have fun with it.</p>\n    <h3>Use Your Drawing Like Software</h3>\n    <p>Here&apos;s where things get really interesting. The drawing part is easy. You put on paper what you see in your head &#x2013; simple, yeah?</p>\n    <p>But now you have to <em>use</em> it. Run through the software step by step, tapping the paper and moving it to correspond to screens of the process. If you tap something and there&apos;s no paper there to shuffle, draw a new one.</p>\n    <p>You&apos;ll end up with a pile of papers that link to each other in the end, but this is exactly what you need. A clear idea of what it looks like to go from step one to step two to step three, back to step one and on to step four seamlessly in your eventual interface. Better to find out now than when you&apos;ve already paid thousands to have it developed that something doesn&apos;t work.</p>\n    <p>This will feel immensely silly at first. Don&apos;t worry about it.</p>\n    <p><br> Trust me when I say this works extremely well and will become an integral part of your development process.</p>\n    <p>Just like reading an essay you wrote aloud, this is one of the most effective ways of finding your mistakes and making adjustments to the work you&apos;re doing BEFORE you get to the point of making permanent commitments to any one part of the process.</p>\n    <h3>Taking Notes</h3>\n    <p>Keep your laptop nearby or another notepad of paper you can write on. You&apos;re going to need it.</p>\n    <p>Every time you find something that doesn&#x2019;t work, a feature that you like but know won&apos;t work in this version, or a problem that might pop up during development, write it down.</p>\n    <p>Keep a couple of different lists here too. One for potential problems or development notes and another for features and functionality that you can&apos;t add just yet.</p>\n    <p>This is so important because otherwise you&apos;re going to come back to these hand drawn notes later and not remember a damn thing about what you liked, didn&apos;t like, or couldn&apos;t make work. It will be a huge waste of time.</p>\n    <p>And you&apos;ll probably end up trying to incorporate more features than you really should.</p>\n    <p>Your lists will become a major part of the next stages of development and will probably grow and change over time &#x2013; one reason you may just want to keep a list on your computer for now.</p>\n    <h3>Rinse and Repeat</h3>\n    <p>Don&apos;t do this just once. What you&apos;re creating is a working, hand-drawn model of how your project will look and feel when finally built.</p>\n    <p>It&apos;s not something you get right on the first try, no matter how many times you&apos;ve run through it in your head.</p>\n    <p>And if you just thought of this idea three days ago? You&apos;re going to need a few runs through this before you start to develop a clear idea of how it&apos;s going to eventually look.</p>\n    <p>How many times is enough?</p>\n    <p>It really depends. You should be able to go through the tapping and testing process of running through your software without any major hiccups or surprises a couple of times through before you stop. And even then, this is an iterative process &#x2013; you&apos;re not going to be &quot;done&quot; for a long time.</p>\n    <h3>The Feature List</h3>\n    <p>It&apos;s one thing to plug features into your drawings to see what happens, but let&apos;s face it &#x2013; too many features will make this project a headache.</p>\n    <p>The last thing you want to do is add features that don&apos;t need to be there to your project. It&apos;s going to drag things out, cost more, and create a development and testing nightmare that you&apos;ll never be able to get through.</p>\n    <p>So you create a list of features instead.</p>\n    <p>A good feature list will do a few things:</p>\n    <ol>\n    <li><strong>Prioritize Features</strong> &#x2013; You&apos;re going to have a lot of cool ideas over the next few weeks. Write them all down but don&apos;t feel like they need to be done now. Create a master list and the more interesting or in-demand a feature becomes, the higher on that list it can be placed. This is how you&apos;ll avoid over committing without giving up on the cool stuff you&apos;re thinking of doing.</li>\n    <li><strong>Help You Strip Out the Unneeded</strong> &#x2013; The core functionality of your app should do one, maybe two things and do them very well. If you find yourself with an app that does a dozen different things and you can&apos;t make them work together without getting a headache, you have too many. Cut them out and strip it back to bare basics. Use your list for that.</li>\n    <li><strong>Put Your Mind at Ease</strong> &#x2013; The list means the ideas aren&apos;t forgotten. They exist, they are ready to be worked on, and they can be integrated back into development&#x2026;later.</li>\n    </ol>\n    <p>One last note on the use of a feature list in development. New features always take a back seat to bugs and other issues that actually keep people from using your app as it was originally meant to be used.</p>\n    <p>All the more reason to avoid adding too many features too early. If you have a bunch and they keep breaking, you&apos;ll be stuck fixing bugs forever. Get the basics down first and then worry about bells and whistles.</p>\n    <h2>Testing</h2>\n    <p>One of the reasons this day is set aside for the hand drawn maps is to ensure you have ample time and resources to test your ideas <em>before</em> you ever start creating your product.</p>\n    <p>It&apos;s hard to test something that doesn&apos;t yet exist, of course, so that&apos;s why we draw it out. In the course of the next few days you&apos;re going to be building the initial prototype of your product and that means you&apos;ll need to have something in place in advance that you can learn from.</p>\n    <p>Some sort of user feedback and personal insights that can guide development of your project. Testing with your drawings allows you to do just that.</p>\n    <h3>Self Testing</h3>\n    <p>We already talked about this a little bit. Self testing is your chance to tap through each page of the documentation you&apos;re creating and see if it works the way you want it to.</p>\n    <p><br> This is where you take notes on things like how transitions will look, what happens when someone enters a strange combination of commands, and how the navigation will work from the top down.</p>\n    <p>It&apos;s also how you start making tough decisions about what will stay in your app and what you&apos;ll strip out to make it something that can realistically be built on your budget.</p>\n    <h3>Friends and Family Testing</h3>\n    <p>Here&apos;s the trickier part. You need to sit down members of your family and friends and ask them to do the same.</p>\n    <p>This is <em>so</em> important that it&apos;s not optional. You need that feedback and you need it in a format that will allow you to get your app into a better format before it starts being built.</p>\n    <p>Have your friends and family sit down and click through your app on paper. Give them a notebook or sit there with them and take notes. Yes it&apos;s silly &#x2013; feel free to admit to them that it&apos;s a silly endeavor. Buy them some pizza for the help.</p>\n    <p>I guarantee, though, that no matter how silly it feels and how much razzing you get from your friends and family (hopefully none), you will learn something from this in a way that you never could from doing it on your own.</p>\n    <p>This is where you&apos;ll need a third list in your notebook &#x2013; the questions.</p>\n    <p>As people go through your papers and attempt to &quot;use&quot; your app, they are going to have a lot of questions.</p>\n    <ul>\n    <li><em>Why doesn&apos;t it do this? </em></li>\n    <li><em>Where is the button for this? </em></li>\n    <li><em>Why not just do this instead?</em></li>\n    </ul>\n    <p>Some questions will seem silly. Others will be enlightening.</p>\n    <p>You would never turn in an assignment without at least one person having proofread it. Neither should you start building your app without at least one person looking over your sketches.</p>\n    <p>Is one person enough? Ideally, no. I&apos;d recommend getting at least three people to go through this exercise and compile their notes. The last thing you want is to change direction and adjust how you approach this project based on the advice of one person. What if they were confused? What if they have a strange bias in how apps run? What if they are a technophobe? Don&apos;t let one opinion drive your development (even your own).</p>\n    <p>Get five people, take notes on their questions and build a better app. Trust me, this will be well worth the time spent getting them to sit down and help you.</p>\n    <h2>Telling the Story of Your App</h2>\n    <p>Other than visualizing the app you are trying to build, what is the point of all this? Why spend an entire day drawing everything on paper when it needs to be crafted in a digital format eventually?</p>\n    <p>Throughout this process, you&apos;re going to find numerous instances in which you are surprised. The development process can only be planned so much &#x2013; surprises are bound to happen, but every surprise, revelation, and feature swap is going to cost you both time and money.</p>\n    <p><br> The more time you spend now developing a clear idea of how this is going to go, the less of an impact such situations will have.</p>\n    <p>More importantly, though, you&apos;re learning the story of your app. Every piece of software has a story to tell &#x2013; a process through which you guide your users when they tap the icon and open on their phone, tablet or computer. That story &#x2013; the feeling that your software evokes and the process through which you put your users &#x2013; is going to be integral to the development process.</p>\n    <p><br> It&apos;s what you need to convey to your developer or keep in mind if you are doing the programming &#x2013; and without this step it&apos;s that much harder to both understand and communicate that journey to the user.</p>\n    <p><br> Even with a script in hand, directors don&apos;t shoot movies without every scene mapped out in advance. Storyboards are a must &#x2013; to the point that they are often done multiple times for the same film as the filmmakers realize at each step of the process that changes are needed. It&apos;s a flexible, low cost way to visualize the finished product without committing the big money to the process.</p>\n    <p>It&apos;s going to be one of the most important things you do in preparing to create your app. It&apos;s also frustrating and tends to be something even the best developers skip over some parts of. I implore you not to do that.</p>\n    <h3>Hand Drawn Wireframes</h3>\n    <p>Up until now, what you&apos;ve been drawing is a visualization of your app. It&apos;s what you see it looking like when it&apos;s done.</p>\n    <p>But a wireframe is a bit more technical. A good wireframe will visualize the pieces of an app from a visual <em>and</em> functional perspective.</p>\n    <p><br> Wireframes are used for web development, app development, and just about anything else with a comprehensive user interface.</p>\n    <p>There is software to create these and I recommend moving to that step next if you find yourself with an app that will have multiple screens or if you are going to be creating a hybrid app that needs to scale to different screen sizes. But for now, the hand drawn route will get the job done.</p>\n    <p>These are what your developer will reference as they start building out the core of your app &#x2013; using them to guide him in the dimensions and other aspects of design in the app. So it&apos;s important that you have at least a good idea of what you want this to look like.</p>\n    <p>As such, don&apos;t be afraid to rip these up and start over at any given point. Draw, redraw, and throw away as many times as is needed to get to the point that you feel good about what you&apos;re handing off to the developer. This is the brief, the directions, the walkthrough for what he&apos;s going to build for you &#x2013; if you don&apos;t spend a good amount of time on it, it&apos;s no one&apos;s fault but your own when it comes out looking like crap.</p>\n    <h3>How Much Detail Do I Need?</h3>\n    <p>To be honest, there&apos;s no such thing as too much detail in a hand drawn wireframe. The more detail you provide, the more accurately your developer can create a finished prototype that actually looks and feels like what you originally drew and tested with friends and family.</p>\n    <p>Here are some specific things to keep in mind when creating your wireframes.</p>\n    <ul>\n    <li><strong>Annotate Heavily</strong> &#x2013; Your wireframe is a blueprint. It&apos;s the plan by which your app will be built. So don&apos;t be afraid to annotate heavily in your drawings. Hand written notes, arrows to show the direction animations will flow, and numbers to indicate the change in size an element will see when swiped &#x2013; these are all important.</li>\n    <li><strong>Use Other Apps</strong> &#x2013; Choose a handful of apps you like the design of and use them heavily. Go through every screen, tap and swipe every element. See what happens and what doesn&apos;t happen. This isn&apos;t to get ideas &#x2013; hopefully you have plenty of those already &#x2013; but to make sure you aren&apos;t skimming over something simple that your developer would need to know.</li>\n    <li><strong>Reference Inspirations</strong> &#x2013; If you&apos;re going to stick with just hand drawn wireframes, you probably won&apos;t have a Hi-Fi version to show the developer. So provide him with links and references to the examples and resources you really like. The stuff that you referenced when creating your wireframe and that he can reference in turning that into a working prototype.</li>\n    <li><strong>Wireframe Everything</strong> &#x2013; Don&apos;t skip &quot;basic&quot; stuff like login pages or settings menus. Have everything clearly outlined in advance to avoid having to double back later. Don&apos;t be lazy.</li>\n    <li><strong>Make Note of and Look for Repetition</strong> &#x2013; Repeated elements in your wireframe will make it easier and faster to develop the app and easier for your users to use it. Look for things that can be reused across different screens and make note of it.</li>\n    <li><strong>Make Note of Dependencies</strong> &#x2013; A wireframe for a shopping cart page does you no good later if you end up using a third party service to power your shopping cart and the dependency requires changes to the layout. Do your research now and indicate where changes can be made down the line.</li>\n    </ul>\n    <p>There are a lot of things to consider here. Two basic rules you can follow though &#x2013; outline everything that could possibly be in your app and take copious notes. If you do those two things, you&apos;ll eliminate the vast majority of potential issues that might crop up down the line.</p>\n    <h3>Screen Mapping</h3>\n    <p>Up to now you&apos;ve been drawing individual screens with notes about how they interact and react to user input. Those wireframes will serve as the blueprint for the developer &#x2013; they are incredibly important.</p>\n    <p>But equally as important not only to the development process but to the user experience is the flow of those screens.</p>\n    <p>How are they going to interact with each other? How many taps does it take to get back to the home screen? How buried is the settings menu? Can the user find the most important features quickly when in a rush? These are all extremely important and can be mapped out in advance with a little bit of screen mapping.</p>\n    <p>Every app has an inherent flow to the way information is contained and connected to different parts of the app.</p>\n    <p>Again, it&apos;s all about visualizing complex information at this point &#x2013; this is the easiest way to do so.</p>\n    <p><strong>Step 1 &#x2013; Identify the Model</strong></p>\n    <p>The model is the highest level of this process &#x2013; what basic high level information is included in your app and how does it interact with other components?</p>\n    <p>This is a basic app that does one thing &#x2013; it has five elements. Simple enough.</p>\n    <p><strong>Step 2 &#x2013; Screen List</strong></p>\n    <p>Once you know the high level architecture of your app, you can create a more comprehensive list of screens.</p>\n    <p>With Twitter, for example, the information model involves the X steps we listed above. But if you were to list out all of the individual screens that are available it would be much longer.</p>\n    <p>This doesn&apos;t include some of the more advanced features either &#x2013; advertising, API access and DMs aren&apos;t included but could be if you were doing this from a very high level. Even the mobile app has a fair number of screens to include in this map:</p>\n    <p><strong>Step 3 &#x2013; Screen Mapping</strong></p>\n    <p>Once you have your comprehensive list of screens you can start mapping them out to show the relationship between those screens. This is a step further than the information model you created in step 1 because it shows how every screen in an app relates to the others.</p>\n    <p><strong>Step 4 &#x2013; Combine with the Wireframes</strong></p>\n    <p>Finally, you can combine the screen map you just created with your wireframe. When paired, the two offer a fairly comprehensive blueprint for your developer. He now knows the order in which screens will display, what each screen will look like, what the purpose of that screen will be, and any other special instructions you provided within the screen&apos;s notes.</p>\n    <p>There&apos;s more you can do in this stage, especially as it pertains to the digital components. But you don&apos;t need to.</p>\n    <p>At this point, if you have the screen map and the drawn wireframes, you can start the application building process.</p>\n    <h4>Avoiding Feature Creep in the Screen Mapping Process</h4>\n    <p>There will be times as you map out your app when you realize there is a gap. Something that makes sense to include or that would greatly enhance the user experience if included.</p>\n    <p>Don&apos;t do it.</p>\n    <p>The risk of feature creep is worst at this stage when it&apos;s all theoretical and makes perfect sense in your drawings. The more you add, however, the higher the risk that you&apos;ll overburden your project and reach the point that you fall behind in development.</p>\n    <p>This is where your feature list comes in the handiest and where you should very consciously step back from the ledge when a new feature looks you in the face.</p>\n    <p>Instead, make notes where the new feature would best fit and patch it in the meantime. You can even create a separate drawing showing what it would look like to include that feature in the future and then set aside your screen map for future reference when you have the resources to add that feature in.</p>\n    <p>Whatever you do, though, don&apos;t add the feature to your list&#x2026;yet.</p>\n    <h3>Storyboarding the Journey of the User</h3>\n    <p>A storyboard is more about the process and how the user will get from Point A to Point B in your app. Rather than showing the path, this illustrates what that path looks like.</p>\n    <p>Sounds the same, right?</p>\n    <p>It can be. Honestly, if you feel comfortable with a screen map and your wireframes, you&apos;re probably good to move to the next step.</p>\n    <p><br> But if your app has a fair number of screens and the user experience is important enough in the context of your app to focus more intently on that journey, this step is very important.</p>\n    <p>What the Story Looks Like</p>\n    <p>A good storyboard shows the process rather than describing it. So it will outline what someone is doing at each peg of the journey from the first item they click on to the last.</p>\n    <p>More importantly, it will annotate why they are tapping a certain button or why they are lost or confused by a certain part of the app. It&apos;s a chance for you to get out in front and try to guess what the biggest problems your users will have will be and how you can address them in the context of your design.</p>\n    <h4>Creating a Storyboard for Your App</h4>\n    <p>The best part about a storyboard is that it takes any form &#x2013; the goal here is to create a visual representation of your user will navigate through and use your app. Again, this is why a screenmap is often enough for some developers.</p>\n    <p>It shows the same information in a cut and dry format.</p>\n    <p>But when you take it to the next step and show what the user is actually doing at each step and where they might get hung up in the use of your app, you anticipate better how that experience will unfold.</p>\n    <p>Here are some more things to consider when drawing out a storyboard for your app:</p>\n    <ul>\n    <li><strong>Consider the Paths</strong> &#x2013; One option is to create a visual checklist of each step someone might take to complete any number of tasks. For example, someone using the Twitter app might open it to browse tweets, compose their own, retweet something they saw, or check statistics. What do each of those journeys look like? Yours will be shorter, of course, since your feature set won&apos;t be as robust (yet).</li>\n    <li><strong>Annotating Your Screen Map</strong> &#x2013; Make this even easier by reusing the screen maps you already created and making notes on them. Write short lists or notes about the use of each screen for your developer to reference instead of drawing it out again from scratch.</li>\n    <li><strong>Reference the Wireframes</strong> &#x2013; Number your wireframes and reference them in this step so it&apos;s easy to see what a single step or frame of the storyboard is referring to from a feature set.</li>\n    <li><strong>Keep the Feature Load Down</strong> &#x2013; Remember when I told you that more features make development harder. This is one of the first instances where you can really feel that. If you have three features, you&apos;ll end up with three lists or maps drawing out how the user might get from step one to the end. Now imagine having 10 features in your app, many of them with branching paths to the others. It would take MUCH longer to draw all of that out.</li>\n    </ul>\n    <p>This is an important step, but don&apos;t let it bog you down too much. At this point you&apos;ve already drawn out how your app will work, done hands on testing, shown it to your friends and family, and mapped out the screens in your app and their relationship to each other.</p>\n    <p>A good storyboard will take all of that one step further and illustrate what it takes to complete certain actions in the software, but it doesn&apos;t need to go into every possible minute detail &#x2013; it&apos;s more of a tool to make sure the app works as well as you envisioned.</p>\n    <h3>What About Digital Wire Framing?</h3>\n    <p>Throughout all of this, I&apos;ve left out the digital parts. It&apos;s all hand drawn.</p>\n    <p>A common question I get at this point is whether it&apos;s a bad idea to use a digital wire framing tool as well.</p>\n    <p>Personally, I feel that a good hand drawn wireframe combined with the maps I referenced above will get the job done just fine.</p>\n    <p>If you&apos;ve followed my suggestions, you only have a handful of features in your app. More than that and you&apos;re overdoing it and probably need a more robust outline of the app.</p>\n    <p>But for a small feature set and a first time app, these will be more than enough.</p>\n    <p>If you are interested, however, in taking it to the next level and testing out some of the more powerful tools on the market, there are a bunch of them.</p>\n    <p>There are some desktop applications, but there are even more SaaS products, which means plenty of options to try out these tools on a free trial.</p>\n    <h4>Is It Worth It?</h4>\n    <p>For what we&apos;re doing, no it&apos;s not. But if you&apos;re doing something bigger or if you just want to get the hang of using a more powerful toolset, then yeah, it might be worth playing around with them a bit.</p>\n    <p>At the same time, keep in mind that this is going to cost you money (once your wireframes are in a tool like this, you&apos;ll want to pay for it to keep them there) and time. Drawing something on paper takes a few seconds and can be redrawn over and over again without a huge waste of time.</p>\n    <p>Mapping them out on a screen with these toolsets takes longer. If you don&apos;t plan on using the more advanced features offered by these tools. It&apos;s not worth it. These include:</p>\n    <ul>\n    <li>On screen guides for placement</li>\n    <li>Drag and drop dummy text and images</li>\n    <li>Precise measurements for your development team</li>\n    <li>Options for moving to a Hi-Fi mockup</li>\n    <li>Easy to share with people</li>\n    </ul>\n    <p>Sounds cool, yes, but it also takes a lot longer to build a wireframe with all those bells and whistles. It&apos;s all a matter of what you need out of it &#x2013; don&apos;t pay for something you don&apos;t need yet.</p>\n    <h4>Options for Those That Need Them</h4>\n    <p>If you do choose to do your wireframes digitally, there are a bunch of tools out there. Here are some of the top free options to start:</p>\n    <ul>\n    <li><strong>Framebox</strong> &#x2013; lightweight and easy, it will still take longer, but it&apos;s free.</li>\n    <li><strong>Appery</strong> &#x2013; It&apos;s a paid service with a very basic free version. It&apos;ll get the job done for basic wireframes though.</li>\n    <li><strong>iPhone Mockup</strong> &#x2013; Helps you mockup screens on different iPhone models if you are building an iOS app.</li>\n    <li><strong>Pencil Project</strong> &#x2013; Great for building prototype designs for free. A bit more of a learning curve (because it&apos;s free), but decently powerful.</li>\n    <li><strong>OmniGraffle</strong> &#x2013; This is a more general graphic-document creation tool, but that means it works for both your wireframes and your screen maps equally.</li>\n    </ul>\n    <p>There you have it &#x2013; your options for creating a mockup and wireframes for your app. With this done, whether you draw it by hand or use a digital tool, you are now ready to move to the next step and start translating all of these lines and boxes into code.</p>\n  </section>\n</article>\n\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter5"
            ],
            [
              "chapter:number",
              "5"
            ],
            [
              "chapter:day",
              "Thursday"
            ],
            [
              "chapter:title",
              "Design & Test"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/06-friday-mvp/toc.html": {
    "revision": 1503356405000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/06-friday-mvp/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Complete a Prototype (A minimum viable product)</h1>\n    <p>Today is about building a product that you can feel good about. One that works (mostly) and with which you can start collecting feedback from users.</p>\n    <p>It&apos;s about pulling everything we&apos;ve been talking about together and creating something amazing.</p>\n    <p>As you can imagine, there&apos;s a lot to it. From knowing what the prototype should look like to developing a strategy for getting feedback, and actually building your app, there&apos;s a fair bit to juggle.</p>\n    <p>But everything we&apos;ve talked about the last five days builds to this. You know your product inside and out by now. You&apos;ve used the app (on paper). You&#x2019;ve solicited feedback. You have a kickass wireframe.</p>\n    <p>It&apos;s time to actually get stuff done.</p>\n    <p>When this process is done, you&apos;ll not only have a working prototype, you&apos;ll be one step closer to launching your product and getting the kind of feedback needed to build it into something truly special.</p>\n    <p>But first it has to be built.</p>\n    <p>For that you&apos;re going to need a full breakdown of the app, what it looks like, what it does, and an idea of who is going to build it.</p>\n    <h2>What to Include in Your Prototype</h2>\n    <p>Your prototype should do several things, but there are even more things it should NOT do.</p>\n    <p>The goal is to create a product with the bare minimum of features needed to do what it was designed to do. The cool idea and problem solving feature you brainstormed back on Monday should be there, but the bells and whistles?</p>\n    <p>Those need to wait.</p>\n    <p>As you can imagine, a prototype doesn&apos;t take particularly long (in the grand scheme of things) to build. It&apos;s small, agile, and easy to use. It&apos;s also probably broken in a few dozen ways and is missing at least half the features you originally envisioned.</p>\n    <p>But this is all good. Just having that working prototype in your hands is going to be the catalyst to do some very cool stuff &#x2013; stuff that until today has seemed too far away.</p>\n    <p>To start, though, there are a few things that absolutely must be in place &#x2013; the tools that will help you collect data and make sure all your hard work is being put to good use.</p>\n    <h3>Monitoring and Analytics</h3>\n    <p>Data.</p>\n    <p>It&apos;s the lifeblood of good software. It will tell you what works, when it works, how it works, and who is using what in your app.</p>\n    <p><br> So you need a tool in place that efficiently collects and collates data to help you make smarter decisions about your app and how development will proceed in the future.</p>\n    <p>What do monitoring and analytics tools provide?</p>\n    <p>They are data filters &#x2013; they show what works, what doesn&apos;t, and how people are using your app. They help you:</p>\n    <ul>\n    <li><strong>Understand Your Users and Where They Are from</strong> &#x2013; Good analytics will break down user characteristics into great detail, showing you where people are from, what their buying habits are in other apps that are tracked, and other basic demographic details that can help you build a better app and drive new users in the future.</li>\n    <li><strong>Measure Actions Taken In-App</strong> &#x2013; What do people actually do when using your app? Are they using the core features? Checking out something else you included? Getting stuck on certain screens or in a navigation loop? The data will help visualize these paths and how they take actions in your software.</li>\n    <li><strong>Payments and Revenue In-App</strong> &#x2013; While your app probably won&apos;t have in-app purchases right away, future updates can benefit from this kind of reporting. Know what people are buying and why they decide to buy it based on their behavior in the software.</li>\n    <li><strong>Reporting Based on Your Business Goals</strong> &#x2013; You have goals and will have new ones specific to your business. With analytics and monitoring installed, you can track performance and see if you are anywhere near reaching them.</li>\n    </ul>\n    <p>Can you imagine building additional tools for your app <em>without </em>this kind of data? What would be the point?</p>\n    <p>Dave McLure, Super Angel Investor and founder of 500 Startups, even has an acronym to help us:</p>\n    <ul>\n    <li>Acquisition &#x2013; Where/what channels do users come from?</li>\n    <li>Activation &#x2013; What % have a &quot;happy&quot; initial experience?</li>\n    <li>Retention &#x2013; Do they come back &amp; revisit over time?</li>\n    <li>Referral &#x2013; Do they like it enough to tell their friends?</li>\n    <li>Revenue &#x2013; Can you monetize this behavior?</li>\n    </ul>\n    <p>Or &quot;AARRR!&quot; for short &#x2013; referenced appropriately as the &quot;Pirate&quot; metrics.</p>\n    <p>Specifically, for a first time developer and a brand new app, there are a few things you&apos;re going to learn from this data right off the bat:</p>\n    <ul>\n    <li><strong>Which Features Matter</strong> &#x2013; Right now, you have a laundry list of new features you <em>may</em> consider adding in the future. Good data can help you make decisions on which ones make the most sense to develop first.</li>\n    <li><strong>Where Problems Occur</strong> &#x2013; Good data will help you determine where problems are most likely to happen in your app. Whether it&apos;s a frequent crash, a broken menu item, or just a very frustrating component of the software, this will help you get a picture than direct complaints, which often only represent a fraction of the issues that occur.</li>\n    <li><strong>How to Run Ad Campaigns</strong> &#x2013; If you use analytics that tie into ad programs like Google&apos;s, you can use the data from your app to make decisions about how best to spend your ad budget (if you have one).</li>\n    </ul>\n    <p>That information is going to guide you in the next steps when this book is completed. When you&apos;ve launched your app, run it past your first few users, and created a system through which you can collect and analyze data, this stuff is going to be pure gold.</p>\n    <p>It&apos;s going to help you get more done, see what works and what doesn&apos;t, and ultimately create a better, more powerful app.</p>\n    <p>To get started, there are a number of tools that plug right into your app without any additional coding needed. Here are some of the best:</p>\n    <ul>\n    <li><strong>Flurry Analytics</strong> &#x2013; This is in the Yahoo Mobile Developer Suite (YMDS) and has a ton of useful data that can be shown on their classic dashboard or one of 10 custom dashboards you can build. You&apos;ll get usage data, audience information, technical data, and events.</li>\n    <li><strong>Google Analytics</strong> &#x2013; Yup, Google has an app for this too. Surprisingly, though, Google&apos;s mobile apps analytics tool has only been around for 3 years and only out of beta for about a year. The cool, thing though, is that it&apos;s part of their Universal Analytics suite &#x2013; meaning it combines data from all sources using the same user ID in Google Analytics. If someone views your website on a desktop, then downloads an app to their phone, then uses that app before going back to your website to read more about it, Google captures everything and pulls it all together. The big downside here is that you don&apos;t get iOS data for conversions in the App Store if you&apos;re building for iOS. It&apos;s probably the most powerful, but again, this is Google and you&apos;re giving them a lot of data from your business.</li>\n    <li><strong>Apple App Analytics</strong> &#x2013; While very cool and integrated with iTunes Connect, this one doesn&apos;t offer enough data to be the only analytics tool you use. You&apos;ll get stuff like App Store Data, Sales Data and Usage Data, but the latter is pretty thin. This is a good one to pair with Google if you&apos;re launching on iOS.</li>\n    </ul>\n    <p>While the largest, these aren&apos;t the only ones out there, either. Here are some others you may consider, depending on your feelings about the above companies:</p>\n    <ul>\n    <li><strong>Facebook Mobile Analytics</strong> &#x2013; Great if you plan on promoting your software on Facebook heavily. The integration here is deep, which is both good and bad depending on how much you want to rely on Facebook.</li>\n    <li><strong>MixPanel</strong> &#x2013; Works for iOS and Android, this one is freemium so you get limited data points in the free version. That said, the actual data is solid and it can be tied together with web data.</li>\n    <li><strong>Answers by Fabric</strong> &#x2013; This is a great platform with a lot of functionality and a fun UI, but it&apos;s owned by Twitter, so know that you&apos;re tying yourself to their platform and what makes the most sense for Twitter in the data.</li>\n    <li><strong>Countly</strong> &#x2013; This is a great one because it offers the power of so many others, works for iOS, Android, and Windows Phone, and is very easy to use. The best part? It&apos;s free if you self-host &#x2013; one of the only open source options with this much functionality.</li>\n    </ul>\n    <p>As you can see, there are a lot of options out there &#x2013; pick the one that best fits your needs and technical savvy.</p>\n    <h3>Gathering Feedback through Your App</h3>\n    <p>One of the most effective ways to get early feedback on your app is to build something into the interface to solicit feedback.</p>\n    <p>You&apos;ve seen this before. A pop up or light box that appears and asks you to leave a review, write a comment, or submit a report if there is an error in the app.</p>\n    <p>This stuff is absolutely vital because it gets real feedback from actual users while they are using your app. There&apos;s no other way to do this unless you&apos;re looking over their shoulder.</p>\n    <p>Fortunately, you don&apos;t need to get nearly as fancy as the big guys do with your feedback request.</p>\n    <p>Complex submission systems and contact forms within the app aren&apos;t necessary &#x2013; all you really need is an email address that someone can tap or click on when they have questions or concerns&#x2026;and a reminder of when to use it.</p>\n    <p>For your earliest users, this options should be as big and bold as possible. You NEED that feedback because it&apos;s going to drive development on your project through every iteration for a long time.</p>\n    <h3>Error Log</h3>\n    <p>Finally, there&apos;s your error log. When something doesn&apos;t go off as planned in the app, the software should log it.</p>\n    <p>This helps in several ways.</p>\n    <p>First, you can test the app internally &#x2013; running through it yourself, sending it to usability testers if you have the budget, or pestering your family to help out.</p>\n    <p>Every time something crashes or breaks, the log will catch it.</p>\n    <p>Second, if an error occurs for a user, the error log will catch it and if they choose to send it to you, that data can help you make changes.</p>\n    <p>You&apos;ve probably seen the screen that pops up when Microsoft Word or Photoshop crash on you &#x2013; asking if you&apos;d be willing to send the error report to the developer.</p>\n    <p>This is a relatively simple integration and the data you collect from it is gold.</p>\n    <h2>What to Exclude from Your Prototype</h2>\n    <p>Now that we&apos;ve established what <em>needs</em> to be there (not much), let&apos;s look at all the stuff you should wait on for now.</p>\n    <p>Keep in mind that everything on this list is temporary. If your app is a success, you can add features to your heart&apos;s content, creating a bigger, better, more attractive app over time.</p>\n    <p>But for now, that stuff is a distraction. For every new feature, you&apos;re looking at hours and hours of your time, and hundreds more potential bugs that you&apos;ll have to sift through.</p>\n    <p>It delays the launch of your app, makes it run worse, and waters down the experience of the core functions. In short, you can sabotage yourself by getting greedy this early.</p>\n    <p>On the plus side, having a clear list in place and an idea of what you will add and when allows you to build a roadmap for the future &#x2013; a sort of next steps guide that you can not only use to drive development but inform your user base.</p>\n    <p>So what exactly should you leave out?</p>\n    <p>The easy answer is &quot;pretty much everything&quot;, but more specifically, the following things should be put on hold for as long as possible as you launch your app:</p>\n    <ul>\n    <li><strong>The Backend</strong> &#x2013; Server-side functionality is expensive. Not only does it mean monthly fees &#x2013; money out of your pocket before you even launch &#x2013; but it creates more points of failure for your app. Even if a robust backend is in the plans, try to build the prototype without it. If you can launch something simple and self-contained, you&apos;ll have an easier time getting up and running long-term.</li>\n    <li><strong>Bells and Whistles</strong> &#x2013; What&apos;s a bell and/or whistle? Simple, this is the stuff to which you think &quot;that would be so <em>cool!&quot;</em> If you think this, it&apos;s probably not needed. Design elements beyond the basics, fancy submission forms, secondary functions, expensive stock video or graphics &#x2013; none of this is needed to make your app work.</li>\n    <li><strong>Non-Core Features</strong> &#x2013; You&apos;ll have a long list of possible features you want to include in your app. But not all of them need to be there. More likely than not you only need one or two of them from your list to get a prototype out the door. Everything else is considered &quot;non-core&quot;. Put them on hold for now.</li>\n    <li><strong>Unique Ways to Do Things</strong> &#x2013; If you can use an existing tool to do something, do it. Don&apos;t reinvent the wheel just because you thought of a unique or cool way to do it. Later.</li>\n    <li><strong>&quot;Smart&quot; Features</strong> &#x2013; Smart functions are awesome &#x2013; they remember the user, customize the layout and navigation to match their needs, and can automate a lot of what software does. It&apos;s also time consuming and bug-ridden. Wait on this for now.</li>\n    </ul>\n    <p>The bottom line, and I cannot emphasize this enough, is that your app doesn&apos;t need to be a revolutionary, mind blowing production with every bell and whistle you can think of &#x2013; it just needs to work. It needs to do one thing and do it well.</p>\n    <p>If you nail this, the rest will fall into place.</p>\n    <p>So don&apos;t get carried away.</p>\n    <h2>Who Is Building Your Software?</h2>\n    <p>When I first started writing this book, this section was going to discuss in great detail how to hire a programmer for your project.</p>\n    <p><br> But realistically, that&apos;s a nightmare waiting to happen.</p>\n    <p>There are situations in which this makes sense. If you know what you&apos;re doing, it&apos;s the fastest way to get things done, but for those new to the field, it&apos;s costly and potentially dangerous to invest in someone you don&apos;t even know to build your product.</p>\n    <p>The world of freelance development is riddled with scam artists and lazy contractors who may or may not get it done on time (or at all).</p>\n    <p>I don&apos;t say this to scare you (as there are a lot of very good contractors out there as well), as much as to remind you that there is no &quot;easy&quot; path to getting this done.</p>\n    <p>For someone in your shoes there are really only two paths to getting your first app completed:</p>\n    <ol>\n    <li>Bring on a technical cofounder who can build it</li>\n    <li>Take a break and learn how to do it yourself</li>\n    </ol>\n    <p>How do you determine which makes more sense to you? Let&apos;s take a look at your options &#x2013; all three and which applies best to you.</p>\n    <p><strong>Cofounder:</strong></p>\n    <ul>\n    <li>You are driven, ready to move forward, but unfamiliar with the technical aspects and have no money to invest.</li>\n    </ul>\n    <p><strong>Do It Yourself:</strong></p>\n    <ul>\n    <li>You have a basic knowledge of programming or are eager to learn, the time in which to learn, and have limited your prototype to the bare basics.</li>\n    </ul>\n    <p><strong>Hiring a Programmer</strong></p>\n    <ul>\n    <li>You have a basic understanding of the code and resources needed to develop software but not necessarily the time in which to do it or learn how to do it, and you have money with which to hire someone.</li>\n    </ul>\n    <h3>For Those That Hire</h3>\n    <p>If you do opt to hire someone to develop your app for you, there are quite a few options out there.</p>\n    <p>They include:</p>\n    <ul>\n    <li>Hire someone local that you know</li>\n    <li>Use Upwork or Freelancer.com</li>\n    <li>Go to programming-language-specific job boards</li>\n    <li>Talk to a friend or family member</li>\n    </ul>\n    <p>There are pros and cons of each of these methods, and as you&apos;ll see shortly, a lot of things that can trip you up. I only share this with you to make sure you know all of the potential outcomes of hiring someone on the outside to handle development of your project.</p>\n    <p>It certainly can go well; it can also fall apart and turn into a massive headache almost immediately if you are not careful.</p>\n    <h4>What to Look for in a Developer</h4>\n    <p>Hiring a developer is like hiring a mechanic for your car &#x2013; they&apos;re doing something you don&apos;t fully understand and could easily lie to you if they so choose. You need someone who is honest, skilled, and organized.</p>\n    <p>How do you know if they are any of those things?</p>\n    <p>It&apos;s not easy. A mechanic is hard enough, and you meet them in person. With a developer online, you only get their emails, and there is no guarantee that English is their first language.</p>\n    <p>Here are three things you can do, though, to help weed out the liars and ensure you find the right person for your project:</p>\n    <h4>Red Flags to Watch For</h4>\n    <p>People lie for plenty of reasons &#x2013; whether to hide past failures or to make themselves look better. Here are some red flags to look for that could indicate a lying contractor:</p>\n    <ul>\n    <li><strong>Has No References</strong> &#x2013; Or won&apos;t provide them. Anyone doing business online should have a laundry list of past projects to show you. If they&apos;re new to the game, ask for professional references and a resume or CV.</li>\n    <li><strong>Wants Upfront Payment</strong> &#x2013; Asking for a deposit on a large project is perfectly normal, but asking for a big chunk of cash up front when you&apos;ve never worked from someone, especially if you&apos;re using a site like Upwork where the hours are guaranteed &#x2013; that&apos;s a different matter altogether.</li>\n    <li><strong>Refuses to Provide Numbers in Writing</strong> &#x2013; This goes without saying. If someone won&apos;t commit to paper and a signature on their quote, they aren&apos;t confident they can get it done.</li>\n    <li><strong>Provides Few Details on the Process</strong> &#x2013; Ask someone what their work process is. If they do this professionally, the description should be long and detailed. If they can&apos;t provide it or refuse to do so, they may not know as much as they claim.</li>\n    <li><strong>Poor Communication</strong> &#x2013; If someone misses one email by a day or two, it could be a mistake or a timing issue. If they repeatedly wait to respond to your messages for 24-48 hours, ignore questions, or seem to misunderstand much of what you&apos;re asking, that&apos;s a much bigger red flag.</li>\n    <li><strong>Doesn&apos;t Seem Interested in You</strong> &#x2013; Some contractors are in it for the volume. They pull in as many contracts as they can and complete them whenever they feel like it, or worse, subcontract it to someone else. If they aren&apos;t asking you questions, refuse to talk on the phone, and offer few ideas or suggestions to improve or streamline development, they probably don&apos;t care that much.</li>\n    </ul>\n    <p>The bottom line is that if you feel funny hiring someone, they&apos;re probably not worth hiring. Always keep this mind.</p>\n    <h4>Test People Before Hiring</h4>\n    <p>Before you agree to give anyone money, test them. Ask them a few select questions that they should know the answer to if they are telling the truth about their background. These might include:</p>\n    <ul>\n    <li><strong>How many other projects do you have?</strong> &#x2013; If you&apos;re their first, reconsider. Yes, you can get a killer deal on a freelancer who is just getting started and knows their stuff, but it&apos;s a bit of a crap shoot.</li>\n    <li><strong>How many projects have you worked on? Any like mine?</strong> &#x2013; Don&apos;t just ask for a portfolio, ask for similar projects &#x2013; at least in terms of the coding and deliverable.</li>\n    <li><strong>What are your regular work hours? Do you have a full time job?</strong> &#x2013; Find out if this is a side gig or a full time job. The latter can be fine, but don&apos;t expect your project to be top priority if so.</li>\n    <li><strong>Will anyone else be working on my project?</strong> &#x2013; Always ask if they plan on subcontracting any part of the project. You want to know who is building your software.</li>\n    <li><strong>When can I expect to hear from you?</strong> &#x2013; Pretty simple question and yet many contractors won&apos;t have a good answer. Set clear communication guidelines and expectations.</li>\n    <li><strong>What tools and software will you use in development?</strong> &#x2013; They should know the answer to this without even stopping to think. If they have to think, they&apos;re not ready to work with you.</li>\n    </ul>\n    <p>Don&apos;t be afraid to get more technical and ask intentionally tough questions that an amateur wouldn&apos;t know how to answer.</p>\n    <h4>Don&#x2019;t Trust Any One Thing</h4>\n    <p>It&apos;s easy to get sucked in by a glowing review or a strong interview on the phone. Be sure to take into account ALL of the things you see related to a candidate before hiring them. These include:</p>\n    <ul>\n    <li>Reviews</li>\n    <li>Portfolio</li>\n    <li>Profiles</li>\n    <li>Social Accounts</li>\n    </ul>\n    <p>If you see a red flag on ANY of these, walk away. Don&apos;t try to make excuses or ignore the reality of the situation &#x2013; just walk away and you&apos;ll probably save yourself a boat load of both money and time.</p>\n    <p>As you can imagine, hiring someone is a stressful experience. You&apos;re putting all of the work we&apos;ve done in this book into the hands of someone else &#x2013; someone you don&apos;t know and you are trusting to tell the truth.</p>\n    <p>If they are lying or worse, if they are lazy and don&apos;t feel like following through on what they&apos;ve promised, you&apos;re out a bunch of time and possibly money.</p>\n    <p>For this reason, I do generally recommend you build it yourself. You save money, have full control over the process and can make changes as needed. If the knowledge is there or you have the drive to develop that knowledge, do it yourself.</p>\n    <h3>Defining the Timeline and Scope of a Project</h3>\n    <p>Regardless of who is building your software you need a plan in place for the size of the project and when it is going to be completed.</p>\n    <p>A good prototype in general should be something you and a team can complete in a weekend.</p>\n    <p>Yup, just 1-2 days to build out everything needed to have a working app based on your sketches and outlines.</p>\n    <p>This is incredibly cool. Gone are the days when the mere thought of developing software was a multi-month or even multi-year possibility. If you can really keep the scope narrow, avoid overdoing it on the excess features, and get something together quickly, you&apos;ll be able to keep it as simple as possible without any potential issues.</p>\n    <p>At the same time, be realistic.</p>\n    <p>If you have a part time job on the weekend, schoolwork is overwhelming, or if you are truly doing this 100% on your own, 1-2 days may be a bit overzealous. In these situations, you may want to consider a smaller scope or a longer time frame.</p>\n    <p>And one more general rule of thumb here that applies to just about anyone, including yourself.</p>\n    <p><br> Whatever time frame you set &#x2013; whether it&apos;s for you, your cofounder, or a developer you hire &#x2013; double it.</p>\n    <p>Development is a messy process and things will crop up. Whether it&apos;s life or a bug you can&apos;t get around, you&apos;ll almost certainly find yourself fighting the deadline at some point &#x2013; tack on a few extra hours or days if needed to make sure this doesn&apos;t become a problem.</p>\n    <h2>The Build Process</h2>\n    <p>Once you have it scoped out, outlined, timelines and budgets set &#x2013; what does the actual process look like?</p>\n    <p>There are several things to keep in mind, and again, it will depend a lot on whether you do this yourself or hire someone to tackle it for you.</p>\n    <h3>The Flow of Information</h3>\n    <p>Whoever is building your app will need a lot of information. They will need to know just about everything you&apos;ve done thus far in the preparation and development process, but probably not all at once.</p>\n    <p>If this is a cofounder you&apos;re working with closely, they should be in a good place right now and feel comfortable building without too much input, unless you brought them in towards the end of the research and outlining stages.</p>\n    <p>If this is a contractor, you have to assume they know nothing. Never assume, even if you&apos;re hiring someone with extensive experience, that they know everything there is to know about your app and how you are developing it. Give them the benefit of the doubt to be sure, but also feed them everything they need as actively as possible.</p>\n    <h3>How Many Iterations in Prototyping?</h3>\n    <p>Is your prototype the first thing you build?</p>\n    <p>To some degree yes, but keep in mind that development is an ongoing process. As you work on the project, things will break, bugs will appear, and others just won&apos;t work. Those can be fixed on the fly, but the goal here is to create a working prototype, not a perfect one.</p>\n    <p>If you can open it, use the core functions, and close it without a crash or major bug, you have a successful prototype.</p>\n    <p>Many iterations might be needed to reach that point, but ideally you&apos;re looking at a couple days to get something workable together.</p>\n    <h3>When Is It Ready to Move On?</h3>\n    <p>When it works.</p>\n    <p>Realistically, this won&apos;t take long. If you&apos;re keeping it simple and not reinventing the Internet to make it work, you should be able to cobble together the tools and new code needed to run your app in 1-2 days.</p>\n    <p>And as soon as it works without crashing, it&apos;s ready to move on. That might be the same day you start or it might take a week. This will almost completely depend on who is building it, how complicated your specs are, and how much of a perfectionist you decide to be.</p>\n    <h3>When to Worry</h3>\n    <p>There are going to be problems. Every build has them. Whether it&apos;s an AWOL developer, a bored cofounder, or a gap in your knowledge that slows down the development process, don&apos;t expect it to be one smooth run from start to finish.</p>\n    <p>There are going to be problems along the way. That said, there are some red flags you should watch for that could indicate a larger problem that needs to be addressed.</p>\n    <ul>\n    <li><strong>Fixes are creating new problems on an ongoing basis</strong> &#x2013; It&apos;s pretty normal for a fix to create a new bug. Heck, half the time you&apos;ll end up fixing the same problem several times as you work through issues, but if it becomes extensive to the point that you&apos;re spending days on the project, there may be a bigger problem at play.</li>\n    <li><strong>The developer is getting frustrated and downgrading priority on the project</strong> &#x2013; If it&apos;s a contractor, dig into them because you&apos;re paying them for their work. If it&apos;s you or a cofounder, it&apos;s time to talk &#x2013; losing motivation this early in a project can be tough, but you need to power through. You&apos;re 80% of the way there &#x2013; why quit now?</li>\n    <li><strong>Your own use of the software is disappointing</strong> &#x2013; If you use an early build and find it disappointing or frustrating, chances are that early users will feel the same. Don&apos;t let a perfectionist&apos;s goggles delay launch, but don&apos;t feel crappy about a product you&apos;ll be putting your name on either.</li>\n    </ul>\n    <p>For most problems, the best solution is to power through and just get stuff done. But when the problem promises to derail your efforts, slow them down significantly, or just piss you off to the point that you want to quit, take a step back and re-evaluate. Is something bigger wrong?</p>\n    <h3><br>What to Do When You Get Something Back</h3>\n    <p>The prototype is done. You&apos;ve used it. You don&apos;t hate it.</p>\n    <p>Ready to launch, right?</p>\n    <p>Not quite. A good prototype is the first thing you&apos;ll use to get feedback, but that doesn&apos;t mean it&apos;s necessarily ready to sell. There are more steps that you should take, many of which we&apos;ll cover in the next chapter.</p>\n    <p><br> The QA process, checking for any app-breaking errors, is probably the most important of them all. Sure, you need to figure out how you are going to package and sell this thing, but if it won&apos;t run when sold, not only will it fail, you&apos;ll waste a lot of time.</p>\n    <p>Don&apos;t skip this part. It&apos;s incredibly important and is going to give you the insights needed to really ensure your app is ready for the prime time when it goes out.</p>\n    <p>Go to <a href=\"https://ruwix.com/\">ruwix</a> to learn the solution of the Rubik&apos;s Cube and other twisty puzzles like Pyraminx, Skewb and many more.</p>\n  </section>\n</article>\n\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter6"
            ],
            [
              "chapter:number",
              "6"
            ],
            [
              "chapter:day",
              "Friday"
            ],
            [
              "chapter:title",
              "Complete a Prototype"
            ],
            [
              "chapter:short_title",
              "MVP"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/07-saturday-prototype/toc.html": {
    "revision": 1503356408000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/07-saturday-prototype/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Really Complete a Prototype</h1>\n    <p>A prototype done is not a prototype ready to ship.</p>\n    <p>Even with our quick start approach, we need at least a little bit of time to prepare your app for users.</p>\n    <p>To make that happen, today is all about the little stuff that most of us would rather skip over but that could easily sink your project before it really gets started.</p>\n    <p>We&apos;re going to discuss the ins and outs of project management 101 &#x2013; keeping all of this stuff organized so it doesn&apos;t get out of hand as it grows &#x2013; and QA and bug fixes. Essentially, the stuff you should be doing actively <em>right now</em> to get your app ready for the people who will be using it.</p>\n    <p>Skip these steps at your own peril &#x2013; they will be the things that ultimately help you stay ahead of the curve and get something quality into the hands of your users.</p>\n    <h2>Project Management</h2>\n    <p>Whether you are building the app yourself or hire a contractor to do it for you, you need a plan in place to manage the development process, oversee new tasks that come in related to cleanup or fixing your app, and organize all those resources you&apos;ve been juggling for a week now.</p>\n    <p>Yes, this applies just as much to yourself as it does to a contractor (possibly more so). Don&apos;t skip this stuff because it&apos;s going to help you stay on top of the little things that all too often fall through the cracks.</p>\n    <p>The first thing you should know about a project (any project) is that it will take twice as long to complete as you have planned. It will also cost twice as much (if you&apos;re paying someone to do it for you).</p>\n    <p>Not to be a total downer at this stage of the process, but you&apos;d better be prepared for things to fall apart at the very end when you have a deadline in place that will almost certainly be missed.</p>\n    <p>The solution?</p>\n    <p>Back into it. All good project managers know not to trust the dates provided by their creative and development teams.</p>\n    <p><br> Stuff happens, and the people who build stuff are <em>always </em>overly optimistic. You will be too.</p>\n    <p>If someone tells you it will take 5 days, assume it will take 7-10. If you really need it done in five days, ask them to do it in 2-3. Is it foolproof? Not quite, but it&apos;s a lot better than missing your deadlines by a week or more because of unrealistic expectations.</p>\n    <p>Here are a few more tips to help keep your project organized and under control until the moment it finally ships.</p>\n    <ol>\n    <li><strong>Log Everything in a Central Resource</strong></li>\n    </ol>\n    <p>Don&apos;t trust your email. Heck, don&apos;t trust anyone&apos;s email.</p>\n    <p>The biggest mistake you can make is to get lax by allowing all of your communications to live where they live. Good project management involves pulling all of the resources for a project together into a single shared space.</p>\n    <p>That shared space is not your email because it&apos;s way too easy for someone to lose, delete, or forget an email ever existed.</p>\n    <p>You don&apos;t need anything fancy though. Google Drive&apos;s shared folders, a Dropbox account, or Trello are all very effective (and free!) tools you can use to organize files in a shared space. The big stuff has features you&apos;ll never use, at least not until you have a team of people to keep organized and on point.</p>\n    <ol start=\"2\">\n    <li><strong>Communicate Constantly with All Parties Involved</strong></li>\n    </ol>\n    <p>Communication is the biggest gap in any type of project. People get lazy and they forget to reply to emails, leave out valuable information, neglect to followup, or simply drop the ball on their deadlines.</p>\n    <p>To avoid this happening, be as open and transparent as possible with constant communication to everyone involved.</p>\n    <p>Aim to send a followup email to cofounders or contractors every couple of days with what you&apos;re working on and if there are any issues with the project. Even if there are not issues, followup, because it will keep people engaged and the project top of mind.</p>\n    <ol start=\"3\">\n    <li><strong>Have a Timeline in Mind, But Don&apos;t Stick to it too Sharply</strong></li>\n    </ol>\n    <p>&#xA0;A good timeline is important, but it&apos;s not set in stone.</p>\n    <p>In fact, the fastest way to piss yourself off and stress out everyone involved is to treat your deadline like a line in the sand that cannot be missed. Unless you&apos;re launching something for a Fortune 100, you don&apos;t need to hit your deadline.</p>\n    <p>Better good than on time.</p>\n    <p>But having that timeline will give you something to work towards &#x2013; a shared responsibility that you can push each other to meet. This is especially important if you are working on this alone or with a cofounder (contractors are getting paid - they had better respect your timelines).</p>\n    <ol start=\"4\">\n    <li><strong>Test Frequently to Ensure Your Investment is on Point</strong></li>\n    </ol>\n    <p>This is the biggie.</p>\n    <p>Everything we&apos;ve talked about from day one until now is testing and retesting your idea. Every step of the process you should be stopping and reviewing if what you&apos;ve planned and developed is in fact what you <em>need</em> to have from the project at that stage.</p>\n    <p>Your hand drawn walkthroughs, your wireframes, your run through with family members, and now the testing of the actual software &#x2013; it&apos;s all vital to make sure you are as close as possible to what you expect at every stage of the process.</p>\n    <p>If you&apos;re not where you want to be <em>right now</em>, then consider why that is and take action. Don&apos;t find out when it&apos;s too late.</p>\n    <ol start=\"5\">\n    <li><strong>Save Everything for Future Reference</strong></li>\n    </ol>\n    <p>Don&apos;t throw anything out. Save your drawings. Save your emails. Save the first version of the app. Don&apos;t toss stuff out just because it feels like you&apos;re done with that step.</p>\n    <p><br> There&apos;s always more work to be done and you never know when you might need to look back at something you did several days or weeks earlier to find out where a problem might have cropped up.</p>\n    <p>Will you use most of this stuff? Probably not, but better to be prepared than not.</p>\n    <h3>Managing Yourself on a Daily Basis</h3>\n    <p>All this stuff is incredibly important if you are managing a team of people, or even just a single contractor that you have never worked with before. But what about yourself. What do you do when you&apos;re working alone and don&apos;t have to report to anyone but yourself?</p>\n    <p>You get even more strict.</p>\n    <p>Listen, you don&apos;t to be overly harsh on yourself. Stay positive and encouraging to ensure you actually reach your goal, but at the same time, don&#x2019;t let yourself slack off and procrastinate.</p>\n    <p>Treat yourself the way you would treat a contractor and stay consistent in those expectations. Here are three things you can do to help do just that:</p>\n    <ul>\n    <li><strong>Realistically Measure Available Time</strong> &#x2013; Be realistic and map out how much time you have available on a day-to-day basis. Don&apos;t schedule for more than you have available to work, and don&apos;t expect yourself to be more productive than you have been historically.</li>\n    <li><strong>Use a To Do List Tool to Track Availability</strong> &#x2013; Snag a free tool like Toodledo or Todoist and create a list of stuff you need to get done. These tools are super flexible in that you can create folders, priority levels, and filters or you can just manage a list of stuff to work on &#x2013; both have mobile apps for both major platforms.</li>\n    <li><strong>Work with a Partner to Keep You Accountable</strong> &#x2013; Having a business partner is good for one more thing. They will keep you on point; forcing you to actually get work done as there&apos;s a person you&apos;ll now feel accountable to if you drop the ball.</li>\n    </ul>\n    <p>Do these three things and you will be 100% more productive than if you worked completely alone. It won&apos;t solve every problem (you are human after all), but it will reduce the risk of there being a huge issue because you felt like playing Call of Duty instead of coding one day.</p>\n    <h2>Managing QA for Your Project</h2>\n    <p>Like I said, testing is the backbone of your project.</p>\n    <p>Without testing, you&apos;ll never know if what you&apos;re doing is working or if you&apos;re way off base. Better to find out now that your app is busted in a hundred different ways than the day after you launch.</p>\n    <p>At this stage of the process, you&apos;ve moved past pre-testing and into actually testing a (hopefully) working app for bugs. This can be brutal, especially if you did the coding and felt any sense of relief when the project was &quot;done&quot;.</p>\n    <p>The goal of good QC is to have frequent, organized testing that looks for bugs, actively tries to break the app and uncover what vulnerabilities are there, and ensure that the software will work as intended for everyone that will soon be downloading it.</p>\n    <h3>Testing in QC</h3>\n    <p>What exactly should you be testing? With each version of your app, there should be a number of tests run to ensure the app is working as intended.</p>\n    <p>To get started, go back to your wireframes and review your screens. Look for original notes you had about potential issues or questions you had about functionality. Now create a checklist you can use to compare those original drawings to the finished product.</p>\n    <p>The goal here is to make sure what you outlined is exactly what you produced. If the two don&apos;t match up, why? Is it because of logistics, or is there a problem?</p>\n    <h3>Try to Break Your Baby</h3>\n    <p>Software is made to be broken. Seriously, find a single major release that hasn&apos;t been broken (intentionally or otherwise) and I&apos;ll show you software that no one actually used.</p>\n    <p>If an app is good and solves a problem, it will have a lot of users, and a lot of users mean a lot of different use cases. The sheer volume of ways people will use (and misuse) your app is mindboggling, so of course someone will find a way to break it.</p>\n    <p>The goal of QC is to find as many of these app-breaking circumstances as you can <em>before</em> it gets into the hands of anyone who paid for it.</p>\n    <p>The more easily the app can be broken, the more likely a paying user will stumble across the bug. The really rare, hard to replicate stuff is important too, but it affects fewer people. It&apos;s a numbers game. You don&apos;t want to piss off any customers, but if it&apos;s going to happen, the number might as well be as small as possible.</p>\n    <p>So how often do you test the app for these issues?</p>\n    <p>Every time you get a new build back, it should be put through its paces.</p>\n    <p>Use the checklist above to go through every possible situation with the app and ensure it works as intended. Take note of <em>everything</em> you see out of the ordinary, whether it breaks it or not. Sometimes a seemingly small hiccup could turn into a much bigger bug in a certain environment &#x2013; a different version of the operating system, a different hardware configuration, or other apps that interfere with system resources.</p>\n    <p>It&apos;s impossible to test for all of this stuff on your own, so the better your notes, the easier it will be to find those issues when they inevitably pop up.</p>\n    <h3>Record Your Actions</h3>\n    <p>Keep a log of your activity in testing.</p>\n    <p>There are powerful tools out there for bug tracking &#x2013; you don&apos;t need anything nearly that powerful (yet), but you should have some sort of central database to track stuff.</p>\n    <p>Trello is a great tool for this because it can track bugs as well as those you are working on and those that have been fixed or retired down the line.</p>\n    <p>However you do it, make sure you&apos;re using some sort of centralized resource that can record all of your bugs together. If you bring someone else on board or start outsourcing any part of this activity, you want every member of the team to see all the work you&apos;ve already done.</p>\n    <p>The second important part of this process is prioritization.</p>\n    <p>By having all your bugs logged in one central source, you can organize them by priority more easily.</p>\n    <p>At this stage, you really only want to worry about the &quot;critical&quot; stuff &#x2013; the stuff that will absolutely break your app and make it impossible to use. There will be some pretty nasty, prevalent bugs in there that you end up having to ignore because they are more &quot;annoying&quot; than &quot;catastrophic&quot;.</p>\n    <p>It&apos;s part of the game.</p>\n    <p>The better you can organize, the better you can ensure the big bad stuff is dealt with first.</p>\n    <h3>Managing Bug Fixes</h3>\n    <p>This process is all about identifying the biggest possible problems you might have and tackling them in the order they appear (based on priority).</p>\n    <p>In short, if something is going to completely ruin the experience of using your app, it had better be at the top of your list to fix, not buried behind a bunch of cosmetic problems that you happened to notice first.</p>\n    <p>You will not have time to fix them all &#x2013; just work on the ones that will result in refunds and bad reviews.</p>\n    <h4>What&apos;s Critical?</h4>\n    <p>So how do you define critical and bury some bugs that are going to be frustrating, regardless of how often they are noticed?</p>\n    <p>Easy enough &#x2013; you answer two questions:</p>\n    <ol>\n    <li>Does it break the app?</li>\n    <li>How many uses does it affect?</li>\n    </ol>\n    <p><br> The combination of 1 and 2 will determine how critical the problem is and where it should be listed in the priority order of your bug log.</p>\n    <p>A bug that breaks your app but only appears in a very rare situation and has only affected one user is not as important as one that affects dozens of users because it happens relatively frequently.</p>\n    <p>There may even be some bugs that don&apos;t break your app but that affect a large enough number of users that they need to be moved up the priority list and dealt with sooner than later.</p>\n    <p>This will be entirely up to you, but if you think about your users and their experience above and beyond all else, you&apos;ll get a good sense for how seriously to take each of these problems as they occur.</p>\n    <h3>Fix the Critical Stuff</h3>\n    <p>You&apos;re on a budget.</p>\n    <p>If you&apos;re doing this yourself, you only have so much time. If you&apos;re paying someone to do it, you only have so much money.</p>\n    <p>So the number of bugs you fix will depend entirely on how much of either you can invest at any given time.</p>\n    <p>It&apos;s going to be costly if the app is super broken, but those are the things you need to fix before you have a truly effective prototype that can be launched to your first users.</p>\n    <p>To avoid overstretching yourself and your resources, now is the time to draw a line in the sand and only work on those bugs that absolutely must be fixed.</p>\n    <p>Even if you have more money or time to address more of these bugs, your cut off should be at the orange labeled bugs. Anything below that can wait. You&apos;ll need the time, trust me.</p>\n    <h2>Just Ship It</h2>\n    <p>Only two things matter in software &#x2013; that it exists and that it looks good while failing.</p>\n    <p>The bug list above can be a source of major stress for a developer who wants the app to look and feel as good as possible before it gets into the hands of paying users.</p>\n    <p>But the longer you wait, the more this thing costs you.</p>\n    <p>Worse yet, if this thing is going to fail, you want to know now, not a few weeks from now when you&apos;re finally ready to put it out there. Why spend that much extra time and money on an app that is destined for failure?</p>\n    <p>A little harsh? Yeah, but it&apos;s the truth and the longer you can keep that in mind, the better you&apos;re going to perform.</p>\n    <p>There&apos;s a reason you&apos;re building this thing in one week and not one month or one year.</p>\n    <p>Get it done, get it out there and learn whether it&apos;s going to succeed or not.</p>\n    <p>So what do you need to actually ship your app?</p>\n    <p>Not very much.</p>\n    <p>It should work. It&apos;s one thing to send an app out the door with bugs still in the system, but another entirely to ship it when you know it&apos;s going to break for a large percentage of your buyers. This can hurt you in several ways.</p>\n    <p>Bad reviews are a problem but can be glossed over with time, but more than that, the users most likely to enjoy your app and become evangelists for it are the ones who download it first. So if your app is busted out of the box, you&apos;re going to lose a lot of momentum you could use to grow your business down the line.</p>\n    <p>So you want it to work, at least well enough to fulfill the basic promise of the tool.</p>\n  </section>\n</article>\n\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter7"
            ],
            [
              "chapter:number",
              "7"
            ],
            [
              "chapter:day",
              "Saturday"
            ],
            [
              "chapter:title",
              "Really Complete a Prototype"
            ],
            [
              "chapter:short_title",
              "Prototype"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/08-sunday-launch/toc.html": {
    "revision": 1503356413000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/08-sunday-launch/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Launch</h1>\n    <p>The big day is finally here. It&apos;s been a week and you&apos;ve researched your audience, created your business, and outlined and built an app. You&apos;ve done about as much in 7 days as some companies do in 7 years.</p>\n    <p>You are on a lean, mean, app-building budget and you&apos;ve come incredibly far to get to this point.</p>\n    <p>Now it&apos;s time to take everything you just learned and put it into play &#x2013; to launch your app and see how it performs.</p>\n    <p>Scary stuff, right?</p>\n    <p>Don&apos;t worry about it. Like I said, most people fail at this point.</p>\n    <p>You certainly don&apos;t want to fail, but the bar isn&apos;t that high &#x2013; just building something and getting it out there to solicit feedback is more than most developers ever accomplish.</p>\n    <p>You are light years ahead of the competition. Now it&apos;s time to really smoke them by getting your app into the hands of users.</p>\n    <p>The goal here is to accomplish two things:</p>\n    <ol>\n    <li>Feedback</li>\n    <li>Growth</li>\n    </ol>\n    <p>You need people to tell you what they really think so you can fix the app and make it better, and you need to drive user acquisition through word of mouth and eventually good marketing. It all starts here on day one of your launch.</p>\n    <h2>Your First Feedback</h2>\n    <p>All that said, let&apos;s stack the deck a little.</p>\n    <p>Let&apos;s get feedback from people who know you and like you and that you won&apos;t feel horrible about if the app fails completely. These are your alpha, beta, and first run testers and whether they are 100% honest or not, their feedback is invaluable.</p>\n    <p>These are your friends and family and they are going to provide the best insights you&apos;ll receive in the early days.</p>\n    <p>Why is this important?</p>\n    <p>Keep in mind that on average only 1 in 200 users actually provides any form of feedback when using a piece of software &#x2013; and an actual comment or written response is closer to 1 in 1,000. So to get significant written feedback about how your app performs, you&apos;d need thousands of users.</p>\n    <p>That&apos;s not going to happen on day one.</p>\n    <p>And yet, you need feedback. You need to know that this thing does what you&apos;ve promised and does it well.</p>\n    <p>That&apos;s where friends and family come in.</p>\n    <p>Here&apos;s what to do:</p>\n    <ol>\n    <li>Make them install and use it &#x2013; on as many devices as the app is designed to run on</li>\n    <li>Watch them over their shoulder at first and then let them use it alone and log results</li>\n    <li>Get feedback &#x2013; ask for immediate, direct feedback on their experiences and what they were able to accomplish</li>\n    <li>Take notes &#x2013; when they test alone, as them to take notes independently.</li>\n    </ol>\n    <p>What if you don&apos;t have enough friends or family to really get the feedback you need at this stage?</p>\n    <p>Fortunately, plenty of other people are in the same boat as you and there are services designed to help provide that feedback.</p>\n    <p>Paid testing services allow you to gather specific data about your app more rapidly than waiting for actual users or even friends and family (who may be busy or intimidated by the process).</p>\n    <h3>Using Paid Testing Services</h3>\n    <p>These sites are amazing, but can also be expensive, so you need a plan before signing on &#x2013; specific questions you need answered and the kind of data you ultimately want to walk away with.</p>\n    <p>The goal here is twofold:</p>\n    <ol>\n    <li>Can a large group of users break your app quicker than just you and your partner(s)?</li>\n    <li>What does a random group of users think about both the usability and ultimate functionality of the app?</li>\n    </ol>\n    <p>By using a service like this you can learn more about how your app performs on a structural and design level. Which is why you need a clear plan in place.</p>\n    <p>Here are some tips for how to create the questions that will get you to the root of those two things:</p>\n    <ul>\n    <li><strong>Avoid Jargon</strong> &#x2013; Don&apos;t assume anything. Keep it simple and direct, avoiding any of the terms you use to describe your app amongst yourselves. Define everything and err on the side of assuming they have no idea what you are talking about.</li>\n    <li><strong>Be Incredibly Specific?</strong> &#x2013; Define timelines, use patterns and other specifics whenever asking questions. Instead of asking someone how many times they used the app, ask them &quot;how many times did you use the app over a period of 1 hour?&quot; Instead of asking &quot;what version of iOS are you using?&quot; ask them to &quot;Open settings and click on General&gt;About. Please copy the exact version number of the iOS currently installed&quot;. Specificity is vital for these kinds of tests.</li>\n    <li><strong>Make it Clear What You Want Someone Looking At</strong> &#x2013; In your test, define exactly what screen and what action you want someone to be reviewing when they answer a specific question. For website usability testing, breadcrumbs are frequently used along with screenshots. You can do something similar &#x2013; showing them your drawings or a screenshot of what you want them to be reviewing when you ask a specific question.</li>\n    <li><strong>Be Aware of Subjective Questions</strong> &#x2013; If you ask how something makes a user feel, expect a wide range of answers. Different things make different people happy (and angry) and your questions need to be as tightly defined as possible to get the kind of response that will actually be helpful.</li>\n    </ul>\n    <p>Most important of all, don&apos;t be afraid to ask too many questions. Asking 3-5 questions that encompass everything you need to know about your app is a sure way to get vague answers that don&apos;t help much (and you&apos;re paying just as much for the privilege of those answers). Ask as many specific, detailed questions as you can and the answers will be specific in turn.</p>\n    <p>One way to gauge how specific to be is to start at a point that is comfortable but not too in-depth. This will ensure a larger number of answers. You can then get more specific as you revise your tests, but keep in mind that these sites are not free. The more you do this, the more it will cost.</p>\n    <p>As for where to run these tests, there are several sites that offer the kind of in-depth user testing you need to really get to the heart of what your users experience when using your app. Here are some of my favorites:</p>\n    <ul>\n    <li><a href=\"http://www.usabilityhub.com\">UsabilityHub.com</a></li>\n    <li><a href=\"http://www.usertesting.com\">UserTesting.com</a></li>\n    <li><a href=\"http://www.usabilitytools.com\">UsabilityTools.com</a></li>\n    </ul>\n    <p>Most offer similar services, but make sure the site you select is one that works with apps as well as websites &#x2013; some services only work with only-ready content on a website or web app. If yours requires a third party device, it may not work with the platform.</p>\n    <h2>Getting Your First Customers</h2>\n    <p>The data you get from usability testing will be invaluable, but as long as the app isn&apos;t broken, you don&apos;t need to do anything with it right away. For now, the goal is to get your first <em>paying</em> customers &#x2013; people who will give you money to use your app.</p>\n    <p>This is where it all pays off, and trust me, the feeling of your first paying customer is unbelievable &#x2013; nothing like it in this business.</p>\n    <p>But you have to get them first, and without a five figure marketing budget to make it happen, the process can seem daunting at first. Fortunately, there are several things you can do that either cost nothing or very little to jump start the process &#x2013; from incredibly targeted advertising to carefully curated word of mouth.</p>\n    <h3>Two Paths to Early Customers</h3>\n    <p>Customer acquisition for a small company with no budget launching its first app is tricky. Without a bunch of money or an existing install base to contact, you have two options. You either:</p>\n    <ul>\n    <li>Pay for those users</li>\n    </ul>\n    <p>Or:</p>\n    <ul>\n    <li>Attract them through word of mouth</li>\n    </ul>\n    <p>The first set of tactics we&apos;re going to look at relates to actually going out and paying for users &#x2013; investing in the initial base of people who will use your app, share it, and hopefully help it grow. From there, we&apos;ll look at how to leverage those first few users (or skip over this step entirely if you&apos;re out of cash), and drive some serious word of mouth about your app.</p>\n    <h3>Advertising Options on a Budget</h3>\n    <p>If you haven&apos;t noticed, the Internet is one big box of advertisements, with occasional bits of interesting or funny content mixed in.</p>\n    <p><br> Seriously, though, it&apos;s a huge opportunity, not just because of its reach but because of how targeted you can make your ads. Gone are the days when you have to pay thousands of dollars to reach a large audience in the hope that a few of those people will convert and download your app.</p>\n    <p>You can get <em>incredibly</em> specific and target people based on age, location, gender, employment, education, interests, pages followed, sites visited, and dozens of other factors.</p>\n    <p>The end result is the opportunity to advertise to a much smaller group of people who are more likely to actually be interested in your app. It&apos;s powerful, but it&apos;s also complicated and requires a bit of time to setup, or you&apos;re going to be out a boat load of cash.</p>\n    <p>In reality there are thousands of ways to run ads online, but for our purposes, I&apos;m going to break it down to three:</p>\n    <ul>\n    <li><strong>CPA Networks</strong> &#x2013; These ad networks allow others to place ads to your content on their site and get paid a set amount per &quot;action&quot; taken. You decide how much that action is worth. If your app costs $10 for example, you might set your CPA at $5 for a successful download. It&apos;s entirely up to you, but keep in mind that the market will dictate if it&apos;s worth placing those ads. If they don&apos;t convert, people won&apos;t want to run your ads.</li>\n    <li><strong>CPM Display Ads</strong> &#x2013; CPM means Cost Per 1,000 Impressions, and applies to pretty much any form of display advertising you see on the Internet. The banners, the blocks, the ads on Facebook or Twitter &#x2013; they all come in a CPM variant. The cost for 1,000 impressions is pretty low (usually less than $1), but the odds are against you actually getting many conversions out of these.</li>\n    <li><strong>CPC Ads</strong> &#x2013; The CPC ad (cost per click) is the reason Google makes $50 billion a year in profit from their ad networks. When you run a CPC ad campaign, you pay only if someone clicks on that ad. The catch? The cost of a single click can be quite high. In some niches like app downloads, you can expect anywhere between $0.50-$3 for a single click. So you&apos;d better be sure that when someone clicks, they are going to convert and buy your app, about 20% of the time.</li>\n    </ul>\n    <p>There are a lot of networks for all of these types of ads, but for the type of hyper-targeting, low budget advertising you&apos;ll want to do, I recommend sticking with the big boys, which include:</p>\n    <ul>\n    <li>Facebook</li>\n    <li>Google</li>\n    <li>YouTube</li>\n    <li>iOS/Android</li>\n    </ul>\n    <p>You&apos;ll notice that this is really just three companies and that Google has placement on three of the four. There&apos;s a reason for this &#x2013; their ad networks are the most sophisticated and powerful on the planet and allow you the kind of targeting that you won&apos;t find anywhere else.</p>\n    <p><br> At the same time, this stuff isn&apos;t magic. A LOT of people lose a LOT of money advertising online because they assume it will be easy.</p>\n    <p>And worse yet, Facebook and Google make it look really easy. The setup process for a new ad campaign takes less than 15 minutes if you follow their automated steps. It&apos;s a quick path to losing a lot of cash really fast.</p>\n    <h4>How Much Should You Spend?</h4>\n    <p>So the big question then is how much should you spend? A lot of people ask this question and it&apos;s not always clear what the best option is. My opinion is that you set a budget based on the following:</p>\n    <ul>\n    <li>How much do you make when you sell your app?</li>\n    <li>How much do you think that one user will be worth over a lifetime?</li>\n    <li>How much profit do you want to make early?</li>\n    </ul>\n    <p>For a single app with no additional features this is pretty simple.</p>\n    <p>If it costs $10 and you have nothing else to sell them, then your revenue is $10 (minus whatever the app store&apos;s cut is, usually 30%). Let&apos;s say you have $7 to work with and you&apos;re okay walking away with $0.50 per download in the early going, just to get your user base up a bit.</p>\n    <p>So you can spend up to $6.50 per new user, at least until you either further monetize your app or until you raise the price or starting getting new users through word of mouth.</p>\n    <p>On average, a CPC campaign will cost you about $0.75/click. It might be a bit lower on Facebook and a bit higher on Google, but you&apos;ll be in that ballpark, so out of every 8 clicks, you need one person to buy your app &#x2013; that&apos;s a 12.5% conversion rate, which for the record is kind of high.</p>\n    <p>Before your head starts to spin with all these numbers, let&apos;s simplify.</p>\n    <p>Don&apos;t spend more than you make in the early going &#x2013; try to straddle that line and shave of as much as you can. If you can get cheaper ads, go for it. If you are comfortable taking less profit, do it. The goal here is users early, but don&apos;t go broke getting them.</p>\n    <p>At the same time, determine how many users you want to have to consider this a success. If you&apos;re paying for 100% of your user base via ads and you make no profit doing so, eventually this is only going to cost you money as bug complaints and requests start pouring in. Figure out how many people to get on board early and set that as your budget.</p>\n    <h3>Word of Mouth Outreach</h3>\n    <p>One of the most effective ways to build an audience is to let them talk to each other. Word of mouth is the least expensive, most natural, and highest converting form of marketing out there, but it&apos;s not exactly easy to engineer.</p>\n    <p>You can&apos;t stand on a street corner and tell people to tell others about your app.</p>\n    <p>It either needs to be really freaking amazing and generate word of mouth on its own, and even then being good is only a fraction of the formula. You also need to get incredibly lucky.</p>\n    <p>Build it and they won&apos;t necessarily come. You need to do <em>something</em> to spark a fire that can then spread to people who may buy your app.</p>\n    <p>Fortunately, the Internet is a networkers dream come true &#x2013; with several resources perfect for doing just this.</p>\n    <h4>Making a List of Influencers</h4>\n    <p>Here&apos;s how this works.</p>\n    <p>The Internet is full of personalities &#x2013; people who have made a name for themselves by creating educational, funny, or just plain interesting content.</p>\n    <p>Maybe they&apos;re on YouTube, maybe they write reviews for a major blog, or maybe they post funny pictures on a Facebook Page.</p>\n    <p>The common trait is that they have an audience. They have influence over a large number of people, and when someone has that influence over an audience that <em>you</em> want to access, they are your primary target.</p>\n    <p>So the first step is to create a list of these people. They should be:</p>\n    <ul>\n    <li>People who produce content your ideal customer likes</li>\n    <li>People who have previously reviewed or previewed apps on their channels</li>\n    <li>People who know or speak about software, mobile, apps, or the specific niche in which your software solves problems</li>\n    <li>People with a reach of at least 5,000 (preferably in the 15,000-30,000 range)</li>\n    </ul>\n    <p>Build a list of these people and you have your seed &#x2013; somewhere to start that allows you to start attracting a larger audience of potential customers.</p>\n    <h4>Contacting Your Influencers</h4>\n    <p>Once you have a list, it&apos;s time to start sending emails.</p>\n    <p>You&apos;ll need contact information, but again, this is why the Internet is so amazing. Most people will have contact details on their website, Facebook Page, Twitter profile, or any of a dozen other places they spend time.</p>\n    <p>Add that contact information to your list of influencers, in a spreadsheet if you&apos;re not too averse to using them.</p>\n    <p>Now, you need to send a few emails.</p>\n    <p>The goal here is not to beg someone or faun over them obsessively. Tell them the truth, offer them something you think their audience will enjoy, and ask them to provide coverage.</p>\n    <p>There are three rules for doing this:</p>\n    <ol>\n    <li><strong>Know the audience and the platform</strong> &#x2013; Don&apos;t write to someone until you&apos;ve spent at least some time reviewing their site and getting to know what they produce and who they produce it for.</li>\n    <li><strong>Personalize everything</strong> &#x2013; The fastest way to end up in the spam box is to write something that reads like a form letter. If it feels canned, it will be ignored, and the larger the audience, the more likely people are scrutinizing everything that comes in.</li>\n    <li><strong>Don&apos;t Be Afraid to Follow-up</strong> &#x2013; Keep a list of every message you send and follow-up if you don&apos;t hear back. The more people these influencers interact with, the more email they get and the harder it is for them to follow-up. Don&apos;t be afraid to send a second message a week later. If you use Outlook or Gmail, download and install Sidekick &#x2013; an app from Hubspot that will tell you when someone opens your email so you can know if they are avoiding replying or just never saw your message.</li>\n    </ol>\n    <p>The goal is to instantly create a connection. Don&apos;t push your luck and you&apos;ll be able to do just that.</p>\n    <h4>What to Ask When You Connect with an Influencer</h4>\n    <p>The relationship between an influencer and a product creator is symbiotic, and most of these people don&apos;t do it for the money (at least not when recommending products).</p>\n    <p>They review or promote a product because they like it or they think it will help their audience.</p>\n    <p>Your message needs to pitch the value of what you&apos;re offering in terms of what that influencer&apos;s readers, listeners, or viewers are going to be interested in. And that&apos;s not always a review. Here are a few things you should consider pitching depending on what they are using:</p>\n    <ul>\n    <li><strong>Guests Posts</strong> &#x2013; Blog runners have to post a lot of content to stay relevant. For mid-sized blogs especially this means relying heavily on guest authors. If you&apos;re trying to reach the audience of a site that accepts guest posts this is a fantastic, organic way to do it. Don&apos;t blind pitch a guest post, though. Look for sites that say they accept guest posts or that have posted them in the past. Then pitch your post with the audience in mind.</li>\n    <li><strong>Reviews</strong> &#x2013; This is the first instinct of most product creators &#x2013; asking for a review. Pitch your review quest, always thinking in terms of how it benefits them and their audience.</li>\n    <li><strong>Free Downloads</strong> &#x2013; You probably won&apos;t get a review if you do this but if you&apos;ve already gotten a review from an influencer or if you just want to reach their audience, offering a free download key is a great way to do it.</li>\n    <li><strong>Interviews</strong> &#x2013; If they do interviews (this is big for podcasts especially), volunteer your expertise and experience in creating the app and ask if they&apos;ll interview you. This is great, free exposure and gives you the chance to pitch your product actively.</li>\n    </ul>\n    <p>The list goes on but these are the most common things you can realistically ask someone to do when promoting your app. Do your research and match your request to their audience &#x2013; they&apos;ll appreciate it and your positive responses will go up substantially.</p>\n    <h4>The Oldest Influencers &#x2013; The Press</h4>\n    <p>The last bit I want to touch on related to targeting influencers is PR. A press release is roughly the same now as it&apos;s been for the last 50 years, with a few exceptions. First, you can reach thousands of people in a few seconds online, and you can target much more closely to your audience.</p>\n    <p>The downside? Sending a press release can cost you a few bucks. Getting it into full distribution can cost upwards of $400 on a site like PRweb.com and that doesn&apos;t guarantee coverage. There are some free sites, but the distribution is much worse on those sites and the time it takes to follow-up with more niche sites makes them not worth it.</p>\n    <p>Should you use press releases then?</p>\n    <p>If you have a website to promote, the answer is yes. If you are driving all traffic to an App store, consider waiting until you have more word of mouth and something online to promote.</p>\n    <h3>The Long Term Approach</h3>\n    <p>Everything above is about the short term &#x2013; getting people to download your app now. To become your customers now.</p>\n    <p><br> But what about the long game. Surely, it&apos;s not all about right now? Here are some tips to help you build an audience over time that will support the growth of your new business.</p>\n    <h4>Demo Videos and Walkthroughs</h4>\n    <p>You don&apos;t need a website for this, but I recommend building one as soon as you have some downtime and a bit of spare cash or the coding knowledge to slap one together (heck, you can buy a $30 WordPress template on ThemeForest.com and have a site up by tonight if you want).</p>\n    <p>As soon as you do have a site though, or if you have created a YouTube channel, start demoing your app. Show people how it works, what features are available, how to dig into the more detailed features of the app, and how to get more out of it.</p>\n    <p>There are two goals here.</p>\n    <p><br> First, these demos are great marketing tools if someone is looking for a tool to solve a specific problem you address in the walkthrough.</p>\n    <p>Second, they help your users get the most out of your app, which in turn creates happier users who give more positive reviews and boost word of mouth. It&apos;s a win-win-win.</p>\n    <h4>Viral Landing Pages</h4>\n    <p>If you&apos;re not ready for a website, at the very least you need a way to show people what you&apos;re selling online.</p>\n    <p>A quick viral landing page requires very little writing and can be created from a template in 30 minutes. LaunchRock.com is one of the best sites for this, offering hundreds of templates for viral landing pages that you can then promote with the advertising methods listed above or the social media methods coming up next.</p>\n    <p>This gives you a website to drive traffic to with your paid advertising, a way to capture email addresses and send updates on your software, and a way to showcase all those amazing demo videos you are creating.</p>\n    <p>All with limited investment of time or money into a full scale website before you know if your app is going to succeed.</p>\n    <h4>Social Media</h4>\n    <p>This is last for a reason. Social media is a huge time sink and filled with vanity metrics. You can get 10,000 followers on Twitter and not sell a single app, because followers don&apos;t equal customers.</p>\n    <p>This is one of the biggest mistakes made in business. People go down the road of easy wins and social media is the easiest of easy wins.</p>\n    <p>All that said, having a strong social presence is still a good idea for a fledgling company like yours.</p>\n    <p>So for now, you should do the following:</p>\n    <ul>\n    <li>Create accounts you plan to build up over time (Twitter, Facebook, YouTube, Google+)</li>\n    <li>Link to each of these where applicable in your app help materials</li>\n    <li>Link them to your phone so that you can answer questions quickly when someone asks something</li>\n    </ul>\n    <p>More than ever before, people turn to social media for customer service. Use it to answer quick questions and show how awesome you are at supporting your product. That&apos;s about as much as you can hope to get out of social media right now.</p>\n    <p>It seems to be impossible to solve but it&apos;s actually easy to <a href=\"https://ruwix.com/the-rubiks-cube/how-to-solve-the-rubiks-cube-beginners-method/\" target=\"_blank\">solve a Rubik&apos; Cube</a> using algorithms.</p>\n  </section>\n</article>\n\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter8"
            ],
            [
              "chapter:number",
              "8"
            ],
            [
              "chapter:day",
              "Sunday"
            ],
            [
              "chapter:title",
              "Launch"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/09-next-week/toc.html": {
    "revision": 1503356416000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/chapters/09-next-week/toc.html",
        "data": {
          "global": [
            [
              "__unknown",
              ""
            ],
            [
              "body",
              "\n<article>\n  <section>\n    <h1>Refine &amp; Release</h1>\n    <p>It&apos;s been a long week and you&apos;ve done something very few people ever truly accomplish. You&apos;ve created an app from the ground up and launched it.</p>\n    <p>That&apos;s amazing, but you&apos;re just getting started.</p>\n    <p>You&apos;ve entered into a world where nothing is ever <em>truly</em> done. There are bugs to fix, features to implement, new tools to add, and hopefully in the future, new apps to create.</p>\n    <p>Right now, take a few minutes, bask in the awesomeness of what you did and pat yourself on the back. You deserve it.</p>\n    <p>Once you&apos;re done with that, look to next week because there&apos;s a lot more work to do. It&apos;s time to refine and release your app, making it look and feel closer and closer to your original vision.</p>\n    <p>This is where you take all the feedback you got and start reviewing it, looking for common concerns or complaints and building something better.</p>\n    <p>This is also where you start determining when you stop.</p>\n    <p>How much good feedback do you need to receive to keep going? When are you willing to throw in the towel and call it a best try?</p>\n    <p>Now is the time to draw that line so you don&apos;t push yourself well past it and waste hours of your time and thousands of your dollars making something work when it isn&apos;t going to happen.</p>\n    <h2>Where&apos;s the Line?</h2>\n    <p>First thing&apos;s first &#x2013; where is the line? When do you stop working? This is different for everyone, but remember; you need to be realistic about what you can actually get out of your app and what you want to see happen with it.</p>\n    <p>Your numbers might vary, but the bottom line is that you should have something in mind &#x2013; don&apos;t &quot;guess&quot; on something like this. I guarantee you&apos;ll err on the side of killing yourself...or worse, quit before you should.</p>\n    <p>Quitting is one of the great arts of entrepreneurship &#x2013; learn how to do it at the right time and you will be successful.</p>\n    <p>As for feedback, I recommend you look for at least 100 responses to your app. This can be a combination of responses from family, friends, paid users, and paying users.</p>\n    <p>The goal is to get some good information about how the app works and what people think. If you can&apos;t get to 100, consider the next step.</p>\n    <h2>Running Surveys</h2>\n    <p>A survey is a quick way to gauge someone&apos;s reaction to your product both at a high level and a hands-on level in which they actually use your software.</p>\n    <p>If you know you have enough users but can&apos;t get enough feedback to make conclusions, a survey gives you a way to prod them into taking action. Here&apos;s how to build one.</p>\n    <ol>\n    <li><strong>Choose a Survey Service</strong></li>\n    </ol>\n    <p>SurveyMonkey is the standard for this type of thing. It&apos;s inexpensive, easy to use, and can be sent to people through multiple channels. If you want to spend absolutely nothing, you can also use a Google Form to run a survey, but this requires that everyone you contact has provided their email address.</p>\n    <ol start=\"2\">\n    <li><strong>Determine Your Questions</strong></li>\n    </ol>\n    <p>Figure out what you want to know.</p>\n    <p>Aim for between 5-10 questions. This is the sweet spot to actually get responses from your users. More and people will either provide short answers or not bother at all. Less and you don&apos;t get enough information.</p>\n    <p>Be specific in your questions too, but don&apos;t be afraid to ask subjective questions like &quot;how did you <em>like</em> X?&quot;</p>\n    <p>At a high level, what you really need to know is:</p>\n    <ul>\n    <li>What did they like?</li>\n    <li>What didn&apos;t they like?</li>\n    <li>What do they consider &quot;nice to have&quot; and what do they need?</li>\n    </ul>\n    <p>You have a laundry list of new features &#x2013; figure out what these people actually want to see in the next version.</p>\n    <ol start=\"3\">\n    <li><strong>Encourage People to Fill It Out </strong></li>\n    </ol>\n    <p>This is the tough part. You should expect no more than 40% of the people you have contact information for to actually respond to your survey. So you&apos;ll need 250 users to realistically get 100 responses.</p>\n    <p>Do the math and figure out if you&apos;re running short &#x2013; pay the difference on a usability testing site or hire someone through Upwork to run through your app and fill out the survey.</p>\n    <p>It&apos;s worth it to have those 100 responses.</p>\n    <p>One other quick way to drive heavier engagement is to run a contest. Offer a gift certificate to Amazon or something equally enticing to get people to fill out your survey. It doesn&apos;t take much if it&apos;s a short survey.</p>\n    <h3>Evaluating Your Feedback</h3>\n    <p>Once you have 100 responses in hand, it&apos;s time to take action.</p>\n    <p>But some of that feedback will be more helpful than other bits. To ensure you don&apos;t inject your own bias into reading that feedback, here are some tips for how to approach it:</p>\n    <ul>\n    <li><strong>Knowing What to Ignore</strong> &#x2013; Avoid making decisions for your app based on anecdotal recommendations. Just because one guy confirms a concern you personally have doesn&apos;t make it a priority. Look for trends in the data &#x2013; that&apos;s why you asked 100 people to fill out this survey. Ignore small issues that don&#x2019;t crop up more than a couple times, hyperbolic complaints or praise, or other concerns that you know are small in scale.</li>\n    <li><strong>Create a List of Pros and Cons</strong> &#x2013; Create a list from your feedback that outlines the pros and cons of your software. You already have a sizable feature request list and a bug log that you&apos;re working with &#x2013; use these to guide the priority of those lists.</li>\n    <li><strong>Map Out Fixes</strong> &#x2013; From the pros and cons list, pull anything that is mentioned a significant number of times and add it to your bug and feature list. The broken stuff still has priority, but if 40 out of 100 people all asked for the same feature, that might be something you bump to the top of the list when you start injecting new features.</li>\n    </ul>\n    <p>The big obstacle here is creating a feature request list that doesn&apos;t lead you down a path of expensive, unnecessary upgrades.</p>\n    <p>Look out for responses that start with &quot;this would be cool&quot; or &quot;I could see it doing this&#x2026;&quot; These types of responses are helpful, but rarely necessary.</p>\n    <p>The goal is to find what people really need vs. what they say they want.</p>\n    <h2>Updating Your App</h2>\n    <p>At this point, you&apos;re in a very good position.</p>\n    <p>You have 100+ user responses to your app. You have a detailed bug log from QA testing. You have usability notes. You have your first customers!</p>\n    <p>Now it&apos;s time to start making updates.</p>\n    <p>As you go through the update process, you can skip Days 1-4 and go straight to Day 5-7 to repeat those processes.</p>\n    <p>As you make updates, make sure you continuously log bugs and fixes in your Trello tracking board. Write down new features that people want or that you can think of and maintain a detailed log of what to work on and when you want to tackle it.</p>\n    <p>Never bite off more than you can chew, but don&apos;t do the bare minimum &#x2013; your users will know it and will tell you.</p>\n    <p>The focus should always remain on critical fixes and it may take several weeks to get to the point that you&apos;re not just fixing big broken bugs. New features are certainly nice, but they can wait until you have the time and money to tackle them.</p>\n    <h3>Refining and Streamlining the Process</h3>\n    <p>Speaking of which, there is a cost involved with each of these iterations. You&apos;re going to be paying money (or spending a boat load of time) for every iteration you create.</p>\n    <p>You want those iterations to pay off, and ideally take less time and less money each time.</p>\n    <p>To ensure this is the case, set clear benchmarks for what you want to achieve, and by when you want to achieve it.</p>\n    <p>Specifically, you want to make sure that you&apos;re not pouring money down a black hole to make an app that no one is buying better.</p>\n    <p>At the same time, as you continue improving your software, you should maintain the stuff that will get you new users:</p>\n    <ul>\n    <li>Influencer outreach</li>\n    <li>Blogging</li>\n    <li>Social media marketing</li>\n    <li>Getting reviews and being interviewed</li>\n    <li>Soliciting feedback</li>\n    </ul>\n    <p>If you stop doing this stuff, your app will stop growing in users and you&apos;re paying money to upgrade an app that no one is buying.</p>\n    <p><br> So, know your goals and consistently evaluate performance to make sure you are actually achieving them.</p>\n    <p>This process is about honesty. It&apos;s about knowing what works, why it works, and when it stops working.</p>\n    <p>The more honest you are with yourself, and the more direct your approach to the development process, the better you will perform from start to finish.</p>\n  </section>\n</article>\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "resource",
              "toc"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/chapter9"
            ],
            [
              "chapter:number",
              "9"
            ],
            [
              "chapter:day",
              "Next Week"
            ],
            [
              "chapter:title",
              "Refine & Release"
            ],
            [
              "chapter:short_title",
              "Refine"
            ]
          ]
        }
      }
    },
    "expired": false
  },
  "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/author.html": {
    "revision": 1503357146000,
    "data": {
      "properties": {
        "relativePath": "/Users/corymawhorter/repos/personal/sevendaystartup/data/content/author.html",
        "data": {
          "global": [
            [
              "title",
              "Your ecommerce toolbox in the cloud"
            ],
            [
              "body",
              "\n\n<div class=\"h6\" style=\"font-weight: 100;\">About the author</div>\n<h1>Cory Mawhorter</h1>\n\n<p>See the <a href=\"https://github.com/cmawhorter/sevendaystartup\">Github README</a> for more information.</p>\n\n"
            ],
            [
              "contenttype",
              "text/html; charset=utf-8"
            ],
            [
              "id",
              "home"
            ],
            [
              "layout",
              "primary"
            ],
            [
              "route",
              "/about-author"
            ]
          ]
        }
      }
    },
    "expired": false
  }
}